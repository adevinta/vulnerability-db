/*
Copyright 2021 Adevinta
*/

package main

import (
	"errors"
	"flag"
	"fmt"
	"os"
	"strings"
	"sync"

	"github.com/adevinta/vulnerability-db/pkg/store"
	log "github.com/sirupsen/logrus"
)

type familyItem struct {
	Index int
	Total int
	F     store.SourceFamily
}

func main() {

	// Read config
	cfgFilePath := flag.String("c", "./config.toml", "configuration file")
	family := flag.String("f", "", `a string containing the source family to recalculate 
				 the finding exposures for. The string must have following format:
				 name;component;target, for instance:
				 vulcan;vulcan-nessus;87f02904-84f2-4fa8-a2c5-7019497f8f68`)
	n := flag.Int("n", 1, "number of workers to ")
	flag.Parse()

	conf, err := parseConfig(*cfgFilePath)
	if err != nil {
		log.Fatalf("Error reading configuration: %v", err)
	}

	logger := setupLogger(*conf)
	// Build store
	cs := conf.DB
	connStr := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=%s",
		cs.Host, cs.Port, cs.User, cs.Pass, cs.Name, cs.SSLMode)
	db, err := store.NewDB(connStr, logger)
	if err != nil {
		log.Fatalf("Error connecting to DB: %v", err)
	}
	var families []store.SourceFamily
	if *family != "" {
		f, err := parseFamily(*family)
		if err != nil {
			log.Fatal(err)
		}
		families = append(families, f)
	} else {
		log.Info("reading families")
		families, err = db.SourceFamilies()
		if err != nil {
			log.Fatalf("error getting source families %+v", err)
		}
		log.Infof("families read, there are %d", len(families))
	}
	var wg sync.WaitGroup
	// maximum pool length 100
	var pool = make(chan familyItem, 100)
	wg.Add(1)
	go func() {
		for i, fam := range families {
			log.Infof("pushing family %d\n", i)
			pool <- familyItem{i, len(families), fam}
		}
		close(pool)
		wg.Done()
	}()

	for i := 0; i < *n; i++ {
		wg.Add(1)
		go worker(&wg, pool, db, logger)
	}
	log.Info("Waiting workers to finish")
	wg.Wait()
}

func worker(wg *sync.WaitGroup, families <-chan familyItem, db store.VulnStore, l *log.Logger) {
	for f := range families {
		l.Infof("recalculating stats for family number %d out of %d, family %+v\n", f.Index, f.Total, f.F)
		err := db.RecalculateFindingsStatus(f.F)
		if err != nil {
			fmt.Printf("error updating finding exposures %+v", err)
		}
	}
	wg.Done()
}

func setupLogger(cfg config) *log.Logger {
	var logger = log.New()

	logger.SetFormatter(&log.JSONFormatter{})
	logger.SetOutput(os.Stdout)
	logger.SetLevel(parseLogLevel(cfg.Log.Level))

	return logger
}

func parseFamily(f string) (store.SourceFamily, error) {
	// vulcan;vulcan-nessus;87f02904-84f2-4fa8-a2c5-7019497f8f68
	var family store.SourceFamily
	parts := strings.Split(f, ";")
	if len(parts) != 4 {
		return family, errors.New("incorrect family spec")
	}
	family.Name = parts[0]
	family.Component = parts[1]
	family.Target = parts[2]
	return family, nil
}
