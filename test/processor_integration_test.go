//go:build integration
// +build integration

/*
Copyright 2020 Adevinta
*/

package test

import (
	"encoding/json"
	"errors"
	"fmt"
	"reflect"
	"sync"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/jmoiron/sqlx"
	"github.com/sirupsen/logrus/hooks/test"

	"github.com/adevinta/vulnerability-db/pkg/notify"
	"github.com/adevinta/vulnerability-db/pkg/processor"
	"github.com/adevinta/vulnerability-db/pkg/results"
	"github.com/adevinta/vulnerability-db/pkg/store"
	"github.com/adevinta/vulnerability-db/test/utils"
)

const (
	// Default maxEventAge (days).
	maxEventAge = 0

	// timeFmt.
	timeFmt = "2006-01-02 15:04:05"
)

var (
	cmpFindingsExpOpts = cmp.Options{cmpopts.IgnoreFields(processor.FindingNotification{},
		"Finding.ID", "Finding.IssueID", "Finding.TargetID", "Finding.ImpactDetails",
		"TotalExposure", "CurrentExposure", "Resources",
		"Issue.ID", "Issue.Recommendations", "Issue.ReferenceLinks", "Issue.Labels",
		"Target.ID", "Target.Teams",
		"Source.ID", "Source.Time",
	)}
)

// Mock notifier.
type mockNotifier struct {
	pushEvents int
	events     []processor.FindingNotification
}

func (n *mockNotifier) Push(mssg interface{}) error {
	n.pushEvents++
	var ok bool
	var f processor.FindingNotification
	if f, ok = mssg.(processor.FindingNotification); !ok {
		return errors.New("expected notification event to be FindingNotification")
	}
	n.events = append(n.events, f)
	return nil
}

func (n *mockNotifier) verify(want []processor.FindingNotification) (diff string, ok bool) {
	if diff = cmp.Diff(want, n.events, cmpFindingsExpOpts); diff != "" {
		return
	}
	ok = true
	return
}

func (n *mockNotifier) reset() {
	n.pushEvents = 0
	n.events = []processor.FindingNotification{}
}

// expectedData struct defines
// expected DB data.
type expectedData struct {
	table string
	data  map[string]interface{}
}

func TestProcessor(t *testing.T) {
	// testCases holds the specs for the test  cases to verify the correct
	// behavior of the processor.
	//
	// The main point of verification is the correct processing and storing
	// of all data related to check message and its report. This is done by
	// retrieving inserted data from test DB and comparing it with the defined
	// expected one.
	// Expected data objects should be specified following an "increasing
	// object relation complexity order". That means that more complext objects
	// should be defined after simpler ones.
	// This is due to the fact that more complex objects might require the IDs
	// of simpler objects to be uniquely identified and retrieved. Because these
	// IDs are auto generated by the DB we can not fix them in the test specs
	// and, instead, have to retrieve them during test execution.
	// E.g.: Expected findings should be specified after issues and targets.
	//
	// Other considerations regarding expected data:
	// - Integer values must be casted to int64 because that's the type the
	//   DB driver will parse it to when retrieving.
	// - Float values should be casted to float64 and be .0 decimals to
	//   simplify verification because otherwise there are some errors
	//   regarding precision comparison using reflect.DeepEqual.
	//   E.g.: 8.9 is stored and retrieved as 8.899996.
	testCases := []struct {
		name           string
		checkData      string
		expected       []expectedData
		expectedNotifs []processor.FindingNotification
	}{
		{
			name: "Happy path",
			checkData: `
				{
			        "id":"00000000-0000-0000-0000-000000000001",
			        "checktype_name":"vulcan-mock-check",
			        "status":"FINISHED",
			        "target":"www.adevinta.com",
			        "options":"{}",
			        "report":"https://dummy.com/v1/reports/00000000-0000-0000-0000-000000000001.json",
			        "tag":"adrn:adevinta:team:security"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "Managed AWS databases using CA about to expire",
						"description": "Mock description",
						"cwe_id":      int64(216),
					},
				},
				expectedData{
					table: utils.TargetsTable,
					data: map[string]interface{}{
						"identifier": "www.adevinta.com",
					},
				},
				expectedData{
					table: utils.SourcesTable,
					data: map[string]interface{}{
						"name":      "vulcan",
						"component": "vulcan-mock-check",
						"instance":  "00000000-0000-0000-0000-000000000001",
						"options":   "{}",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"status":            "OPEN",
						"score":             float64(8.0),
						"details":           "Managed AWS details",
						"affected_resource": "arn:aws:rds:eu-west-1:123456789012:db:myRDS",
						"fingerprint":       "NOT_PROVIDED",
						"resources":         []byte(`[{"name": "resource name", "resources": null, "attributes": null}]`),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"time":        "2020-01-21 16:03:25",
						"score":       float64(8.0),
						"details":     "Managed AWS details",
						"fingerprint": "NOT_PROVIDED",
						"resources":   []byte(`[{"name": "resource name", "resources": null, "attributes": null}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-21 16:03:25",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:rds:eu-west-1:123456789012:db:myRDS",
							Score:            8.0,
							Status:           "OPEN",
							Details:          "Managed AWS details",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Managed AWS databases using CA about to expire",
								CWEID:       216,
								Description: "Mock description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.adevinta.com",
							},
						},
						Source: store.Source{
							Instance: "00000000-0000-0000-0000-000000000001",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-mock-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:security",
				},
			},
		},
		{
			name: "Should fix initial finding",
			checkData: `
				{
					"id":"00000000-0000-0000-0000-000000000002",
					"checktype_name":"vulcan-initial-check",
					"status":"FINISHED",
					"target":"www.initial.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/00000000-0000-0000-0000-000000000002.json",
					"tag":"adrn:adevinta:team:initial"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000001",
						"target_id":         "a0000000-0000-0000-0000-000000000001",
						"affected_resource": "www.initial.example.com",
						"fingerprint":       "NOT_PROVIDED",
						"status":            "FIXED",
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 00:00:00",
						"fixed_at": "2020-01-01 10:00:00",
						"ttr":      int64(10),
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "www.initial.example.com",
							Score:            7.0,
							Status:           "FIXED",
							Details:          "",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial issue",
								CWEID:       1,
								Description: "Initial issue description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.example.com",
							},
						},
						Source: store.Source{
							Instance: "00000000-0000-0000-0000-000000000000",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:initial",
				},
			},
		},
		{
			name: "Should create new finding event for initial finding",
			checkData: `
			{
				"id":"00000000-0000-0000-0000-000000000003",
				"checktype_name":"vulcan-initial-check",
				"status":"FINISHED",
				"target":"www.initial.example.com",
				"options":"{}",
				"report":"https://dummy.com/v1/reports/00000000-0000-0000-0000-000000000003.json",
				"tag":"adrn:adevinta:team:initial"
			}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000001",
						"target_id":         "a0000000-0000-0000-0000-000000000001",
						"status":            "OPEN",
						"score":             float64(7.0),
						"details":           "Managed AWS details - modified",
						"affected_resource": "www.initial.example.com",
						"fingerprint":       "NOT_PROVIDED",
						"resources":         []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-2009-3023"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 00:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(7.0),
						"time":        "2020-01-02 10:00:00",
						"details":     "Managed AWS details - modified",
						"fingerprint": "NOT_PROVIDED",
						"resources":   []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-2009-3023"}], "attributes": ["CVE"]}]`),
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "www.initial.example.com",
							Score:            7.0,
							Status:           "OPEN",
							Details:          "Managed AWS details - modified",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial issue",
								CWEID:       1,
								Description: "Initial issue description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.example.com",
							},
						},
						Source: store.Source{
							Instance: "00000000-0000-0000-0000-000000000003",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:initial",
				},
			},
		},
		{
			name: "Should reopen initial fixed finding",
			checkData: `
				{
					"id":"00000000-0000-0000-0000-000000000004",
					"checktype_name":"vulcan-initial-fixed-check",
					"status":"FINISHED",
					"target":"www.initial.fixed.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/00000000-0000-0000-0000-000000000004.json",
					"tag":"adrn:adevinta:team:fixed"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000002",
						"target_id":         "a0000000-0000-0000-0000-000000000002",
						"status":            "OPEN",
						"score":             float64(9.0),
						"details":           "Initial fixed issue details",
						"affected_resource": "arn:aws:ec2:region:777788889999:sg/sg-11223344556677889",
						"fingerprint":       "NOT_PROVIDED",
						"resources":         []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-8888-9999"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-03 01:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(9.0),
						"time":        "2020-01-03 01:00:00",
						"details":     "Initial fixed issue details",
						"fingerprint": "NOT_PROVIDED",
						"resources":   []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-8888-9999"}], "attributes": ["CVE"]}]`),
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:777788889999:sg/sg-11223344556677889",
							Score:            9.0,
							Status:           "OPEN",
							Details:          "Initial fixed issue details",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial fixed issue",
								CWEID:       2,
								Description: "Initial fixed issue description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.fixed.example.com",
							},
						},
						Source: store.Source{
							Instance: "00000000-0000-0000-0000-000000000004",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-fixed-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:fixed",
				},
			},
		},
		{
			name: "Should reopen initial fixed finding via 'cross checktype'",
			checkData: `
					{
						"id":"00000000-0000-0000-0000-000000000005",
						"checktype_name":"vulcan-cross-checktype-check",
						"status":"FINISHED",
						"target":"www.initial.fixed.example.com",
						"options":"{}",
						"report":"https://dummy.com/v1/reports/00000000-0000-0000-0000-000000000005.json",
						"tag":"adrn:adevinta:team:fixed"
					}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000002",
						"target_id":         "a0000000-0000-0000-0000-000000000002",
						"status":            "OPEN",
						"score":             float64(6.0),
						"details":           "Initial fixed issue details - modified",
						"affected_resource": "arn:aws:ec2:region:777788889999:sg/sg-11223344556677889",
						"fingerprint":       "NOT_PROVIDED",
						"resources":         []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-9999-9999"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-03 01:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(6.0),
						"time":        "2020-01-03 01:00:00",
						"details":     "Initial fixed issue details - modified",
						"fingerprint": "NOT_PROVIDED",
						"resources":   []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-9999-9999"}], "attributes": ["CVE"]}]`),
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:777788889999:sg/sg-11223344556677889",
							Score:            6.0,
							Status:           "OPEN",
							Details:          "Initial fixed issue details - modified",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial fixed issue",
								CWEID:       2,
								Description: "Initial fixed issue description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.fixed.example.com",
							},
						},
						Source: store.Source{
							Instance: "00000000-0000-0000-0000-000000000005",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-cross-checktype-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:fixed",
				},
			},
		},
		{
			name: "Should open multiple new findings",
			checkData: `
				{
					"id":"00000000-0000-0000-0000-000000000006",
					"checktype_name":"vulcan-new-check",
					"status":"FINISHED",
					"target":"www.new.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/00000000-0000-0000-0000-000000000006.json",
					"tag":"adrn:adevinta:team:new"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "New issue one",
						"description": "New issue one description",
						"cwe_id":      int64(3),
					},
				},
				expectedData{
					table: utils.TargetsTable,
					data: map[string]interface{}{
						"identifier": "www.new.example.com",
					},
				},
				expectedData{
					table: utils.SourcesTable,
					data: map[string]interface{}{
						"name":      "vulcan",
						"component": "vulcan-new-check",
						"instance":  "00000000-0000-0000-0000-000000000006",
						"options":   "{}",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"status":            "OPEN",
						"score":             float64(5.0),
						"details":           "New issue one details",
						"affected_resource": "www.new.example.com",
						"fingerprint":       "NOT_PROVIDED",
						"resources":         []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-0000-0001"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(5.0),
						"time":        "2020-01-04 01:00:00",
						"details":     "New issue one details",
						"fingerprint": "NOT_PROVIDED",
						"resources":   []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-0000-0001"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-04 01:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "New issue two",
						"description": "New issue two description",
						"cwe_id":      int64(4),
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						// issue_id will be overwritten in
						// related data map when parsing this
						// due to just retrieved issue, which
						// will lead to new finding 'two'
						// being retrieved instead of 'one'.
						"status":            "OPEN",
						"score":             float64(6.0),
						"details":           "New issue two details",
						"affected_resource": "www.new.example.com",
						"fingerprint":       "NOT_PROVIDED",
						"resources":         []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-0000-0002"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(6.0),
						"time":        "2020-01-04 01:00:00",
						"details":     "New issue two details",
						"fingerprint": "NOT_PROVIDED",
						"resources":   []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-0000-0002"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-04 01:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "www.new.example.com",
							Score:            5.0,
							Status:           "OPEN",
							Details:          "New issue one details",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "New issue one",
								CWEID:       3,
								Description: "New issue one description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.new.example.com",
							},
						},
						Source: store.Source{
							Instance: "00000000-0000-0000-0000-000000000006",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-new-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:new",
				},
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "www.new.example.com",
							Score:            6.0,
							Status:           "OPEN",
							Details:          "New issue two details",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "New issue two",
								CWEID:       4,
								Description: "New issue two description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.new.example.com",
							},
						},
						Source: store.Source{
							Instance: "00000000-0000-0000-0000-000000000006",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-new-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:new",
				},
			},
		},
		{
			name: "Should reopen initially EXPIRED finding",
			checkData: `
				{
					"id":"00000000-0000-0000-0000-000000000007",
					"checktype_name":"vulcan-initial-expired-check",
					"status":"FINISHED",
					"target":"www.initial.expired.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/00000000-0000-0000-0000-000000000007.json",
					"tag":"adrn:adevinta:team:expired"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "Initial expired issue",
						"description": "Initial expired issue description",
						"cwe_id":      int64(2),
					},
				},
				expectedData{
					table: utils.TargetsTable,
					data: map[string]interface{}{
						"identifier": "www.initial.expired.example.com",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"status":            "OPEN",
						"score":             float64(9.0),
						"details":           "Initial expired issue details",
						"affected_resource": "www.initial.expired.example.com",
						"fingerprint":       "NOT_PROVIDED",
						"resources":         []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-1111-1111"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at":   "2020-01-01 01:00:00",
						"fixed_at":   nil,
						"ttr":        nil,
						"expired_at": nil,
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "www.initial.expired.example.com",
							Score:            9.0,
							Status:           "OPEN",
							Details:          "Initial expired issue details",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial expired issue",
								CWEID:       2,
								Description: "Initial expired issue description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.expired.example.com",
							},
						},
						Source: store.Source{
							Instance: "00000000-0000-0000-0000-000000000007",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-expired-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:expired",
				},
			},
		},
		{
			name: "Should fix initially EXPIRED finding",
			checkData: `
				{
					"id":"00000000-0000-0000-0000-000000000008",
					"checktype_name":"vulcan-initial-expired-check",
					"status":"FINISHED",
					"target":"www.initial.expired.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/00000000-0000-0000-0000-000000000008.json",
					"tag":"adrn:adevinta:team:expired"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "Initial expired issue",
						"description": "Initial expired issue description",
						"cwe_id":      int64(2),
					},
				},
				expectedData{
					table: utils.TargetsTable,
					data: map[string]interface{}{
						"identifier": "www.initial.expired.example.com",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"status":            "FIXED",
						"score":             float64(9.0),
						"affected_resource": "www.initial.expired.example.com",
						"fingerprint":       "NOT_PROVIDED",
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at":   "2020-01-01 01:00:00",
						"fixed_at":   "2020-03-01 01:00:00",
						"ttr":        int64(1440),
						"expired_at": nil,
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "www.initial.expired.example.com",
							Score:            9.0,
							Status:           "FIXED",
							Details:          "",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial expired issue",
								CWEID:       2,
								Description: "Initial expired issue description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.expired.example.com",
							},
						},
						Source: store.Source{
							Instance: "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-expired-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:expired",
				},
			},
		},
		{
			name: "Should not reopen finding marked as false positive",
			checkData: `
				{
					"id":"00000000-0000-0000-0000-FFFFFFFFFFFF",
					"checktype_name":"vulcan-initial-false-positive-check",
					"status":"FINISHED",
					"target":"www.initial.false.positive.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/00000000-0000-0000-0000-FFFFFFFFFFFF.json",
					"tag":"adrn:adevinta:team:falsepositive"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000004",
						"target_id":         "a0000000-0000-0000-0000-000000000004",
						"status":            "FALSE_POSITIVE",
						"score":             float64(9.0),
						"details":           "Initial false positive issue details",
						"affected_resource": "www.initial.false.positive.example.com",
						"fingerprint":       "NOT_PROVIDED",
						"resources":         []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-FFFF-FFFF"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 01:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(9.0),
						"time":        "2020-01-02 01:00:00",
						"details":     "Initial false positive issue details",
						"fingerprint": "NOT_PROVIDED",
						"resources":   []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-FFFF-FFFF"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(9.0),
						"time":        "2020-01-01 01:00:00",
						"fingerprint": "NOT_PROVIDED",
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "www.initial.false.positive.example.com",
							Score:            9.0,
							Status:           "FALSE_POSITIVE",
							Details:          "Initial false positive issue details",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial false positive issue",
								CWEID:       2,
								Description: "Initial false positive description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.false.positive.example.com",
							},
						},
						Source: store.Source{
							Instance: "00000000-0000-0000-0000-FFFFFFFFFFFF",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-false-positive-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:falsepositive",
				},
			},
		},
		{
			name: "Should not fix a finding marked as false positive",
			checkData: `
				{
					"id":"00000000-0000-0000-0000-FFFFFFFFFFF0",
					"checktype_name":"vulcan-initial-false-positive-check",
					"status":"FINISHED",
					"target":"www.initial.false.positive.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/00000000-0000-0000-0000-FFFFFFFFFFF0.json",
					"tag":"adrn:adevinta:team:falsepositive"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000004",
						"target_id":         "a0000000-0000-0000-0000-000000000004",
						"affected_resource": "www.initial.false.positive.example.com",
						"fingerprint":       "NOT_PROVIDED",
						"status":            "FALSE_POSITIVE",
						"score":             float64(9.0),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 01:00:00",
						"fixed_at": "2020-01-03 01:00:00",
						"ttr":      int64(48),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(9.0),
						"time":        "2020-01-01 01:00:00",
						"fingerprint": "NOT_PROVIDED",
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "www.initial.false.positive.example.com",
							Score:            9.0,
							Status:           "FALSE_POSITIVE",
							Details:          "",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial false positive issue",
								CWEID:       2,
								Description: "Initial false positive description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.false.positive.example.com",
							},
						},
						Source: store.Source{
							Instance: "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeee4",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-false-positive-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:falsepositive",
				},
			},
		},
		{
			name: "Should not reopen finding marked as false positive - previously FIXED",
			checkData: `
				{
					"id":"00000000-0000-0000-0000-FFFFFFFFFFF2",
					"checktype_name":"vulcan-initial-false-positive-check",
					"status":"FINISHED",
					"target":"www.initial.false.positive.2.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/00000000-0000-0000-0000-FFFFFFFFFFF2.json",
					"tag":"adrn:adevinta:team:falsepositive"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000004",
						"target_id":         "a0000000-0000-0000-0000-000000000005",
						"status":            "FALSE_POSITIVE",
						"score":             float64(9.0),
						"details":           "Initial false positive issue details",
						"affected_resource": "www.initial.false.positive.2.example.com",
						"fingerprint":       "NOT_PROVIDED",
						"resources":         []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-FFFF-FFFF"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-03 01:00:00",
						"ttr":      nil,
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 01:00:00",
						"fixed_at": "2020-01-01 02:00:00",
						"ttr":      int64(1),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(9.0),
						"time":        "2020-01-03 01:00:00",
						"details":     "Initial false positive issue details",
						"fingerprint": "NOT_PROVIDED",
						"resources":   []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-FFFF-FFFF"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(9.0),
						"time":        "2020-01-01 01:00:00",
						"fingerprint": "NOT_PROVIDED",
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "www.initial.false.positive.2.example.com",
							Score:            9.0,
							Status:           "FALSE_POSITIVE",
							Details:          "Initial false positive issue details",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial false positive issue",
								CWEID:       2,
								Description: "Initial false positive description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.false.positive.2.example.com",
							},
						},
						Source: store.Source{
							Instance: "00000000-0000-0000-0000-FFFFFFFFFFF2",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-false-positive-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:falsepositive",
				},
			},
		},
		{
			name: "Should not FIX finding marked as false positive - previously FIXED",
			checkData: `
				{
					"id":"00000000-0000-0000-0000-FFFFFFFFFFF3",
					"checktype_name":"vulcan-initial-false-positive-check",
					"status":"FINISHED",
					"target":"www.initial.false.positive.2.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/00000000-0000-0000-0000-FFFFFFFFFFF3.json",
					"tag":"adrn:adevinta:team:falsepositive"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000004",
						"target_id":         "a0000000-0000-0000-0000-000000000005",
						"affected_resource": "www.initial.false.positive.2.example.com",
						"fingerprint":       "NOT_PROVIDED",
						"status":            "FALSE_POSITIVE",
						"score":             float64(9.0),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 01:00:00",
						"fixed_at": "2020-01-01 02:00:00",
						"ttr":      int64(1),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(9.0),
						"time":        "2020-01-01 01:00:00",
						"fingerprint": "NOT_PROVIDED",
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "www.initial.false.positive.2.example.com",
							Score:            9.0,
							Status:           "FALSE_POSITIVE",
							Details:          "",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial false positive issue",
								CWEID:       2,
								Description: "Initial false positive description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.false.positive.2.example.com",
							},
						},
						Source: store.Source{
							Instance: "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeee5",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-false-positive-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:falsepositive",
				},
			},
		},
		{
			name: "Should reopen FALSE POSITIVE finding due to fingerprint variation",
			checkData: `
				{
			        "id":"aaaaaaaa-0000-0000-0000-000000000000",
			        "checktype_name":"vulcan-initial-false-positive-check",
			        "status":"FINISHED",
			        "target":"www.initial.false.positive.example.com",
			        "options":"{}",
			        "report":"https://dummy.com/v1/reports/aaaaaaaa-0000-0000-0000-000000000000.json",
			        "tag":"adrn:adevinta:team:falsepositive"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "Initial false positive issue",
						"description": "Initial false positive description",
						"cwe_id":      int64(2),
					},
				},
				expectedData{
					table: utils.TargetsTable,
					data: map[string]interface{}{
						"identifier": "www.initial.false.positive.example.com",
					},
				},
				expectedData{
					table: utils.SourcesTable,
					data: map[string]interface{}{
						"name":      "vulcan",
						"component": "vulcan-initial-false-positive-check",
						"instance":  "aaaaaaaa-0000-0000-0000-000000000000",
						"options":   "{}",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"status":            "OPEN",
						"score":             float64(9.0),
						"affected_resource": "www.initial.false.positive.example.com",
						"fingerprint":       "newMockFingerprint",
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"time":        "2020-01-01 01:00:00",
						"score":       float64(9.0),
						"fingerprint": "NOT_PROVIDED",
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"time":        "2021-01-21 16:03:25",
						"score":       float64(9.0),
						"fingerprint": "newMockFingerprint",
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 01:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "www.initial.false.positive.example.com",
							Score:            9.0,
							Status:           "OPEN",
							Details:          "",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial false positive issue",
								CWEID:       2,
								Description: "Initial false positive description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.false.positive.example.com",
							},
						},
						Source: store.Source{
							Instance: "aaaaaaaa-0000-0000-0000-000000000000",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-false-positive-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:falsepositive",
				},
			},
		},
		{
			name: "Should invalidate v1 model finding and open a new v2 model finding",
			checkData: `
				{
			        "id":"aaaaaaaa-0000-0000-0000-000000000002",
			        "checktype_name":"vulcan-model-check",
			        "status":"FINISHED",
			        "target":"www.model.test.example.com",
			        "options":"{}",
			        "report":"https://dummy.com/v1/reports/aaaaaaaa-0000-0000-0000-000000000002.json",
			        "tag":"adrn:adevinta:team:model"
				}`,
			expected: []expectedData{
				// Invalidated v1 finding
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "Exposed SSH Ports",
						"description": "An SSH port is accessible from the public internet",
						"cwe_id":      int64(1),
					},
				},
				expectedData{
					table: utils.TargetsTable,
					data: map[string]interface{}{
						"identifier": "www.model.test.example.com",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"status":            "INVALIDATED",
						"score":             float64(7.0),
						"details":           "Exposed SSH Port in 22",
						"affected_resource": "www.model.test.example.com",
						"fingerprint":       "NOT_PROVIDED",
					},
				},
				// New v2 finding
				expectedData{
					table: utils.SourcesTable,
					data: map[string]interface{}{
						"name":      "vulcan",
						"component": "vulcan-model-check",
						"instance":  "aaaaaaaa-0000-0000-0000-000000000002",
						"options":   "{}",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"status":            "OPEN",
						"score":             float64(7.0),
						"details":           "Exposed SSH Port in 22",
						"affected_resource": "TCP22",
						"fingerprint":       "v2ModelMockFingerprint",
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"time":        "2021-01-21 16:03:25",
						"score":       float64(7.0),
						"details":     "Exposed SSH Port in 22",
						"fingerprint": "v2ModelMockFingerprint",
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2021-01-21 16:03:25",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "www.model.test.example.com",
							Score:            7.0,
							Status:           "INVALIDATED",
							Details:          "Exposed SSH Port in 22",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Exposed SSH Ports",
								CWEID:       1,
								Description: "An SSH port is accessible from the public internet",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.model.test.example.com",
							},
						},
						Source: store.Source{
							Instance: "aaaaaaaa-0000-0000-0000-000000000001",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-model-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:model",
				},
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "TCP22",
							Score:            7.0,
							Status:           "OPEN",
							Details:          "Exposed SSH Port in 22",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Exposed SSH Ports",
								CWEID:       1,
								Description: "An SSH port is accessible from the public internet",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.model.test.example.com",
							},
						},
						Source: store.Source{
							Instance: "aaaaaaaa-0000-0000-0000-000000000002",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-model-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:model",
				},
			},
		},
		{
			name: "Should create new v2 model finding event for old v1 model finding continuing its lifecycle due to target and affected resource match",
			checkData: `
				{
			        "id":"aaaaaaaa-0000-0000-0000-000000000003",
			        "checktype_name":"vulcan-model-check",
			        "status":"FINISHED",
			        "target":"www.model.test.example.com",
			        "options":"{}",
			        "report":"https://dummy.com/v1/reports/aaaaaaaa-0000-0000-0000-000000000003.json",
			        "tag":"adrn:adevinta:team:model"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "Exposed SSH Ports",
						"description": "An SSH port is accessible from the public internet",
						"cwe_id":      int64(1),
					},
				},
				expectedData{
					table: utils.TargetsTable,
					data: map[string]interface{}{
						"identifier": "www.model.test.example.com",
					},
				},
				expectedData{
					table: utils.SourcesTable,
					data: map[string]interface{}{
						"name":      "vulcan",
						"component": "vulcan-model-check",
						"instance":  "aaaaaaaa-0000-0000-0000-000000000003",
						"options":   "{}",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"status":            "OPEN",
						"score":             float64(7.0),
						"details":           "Exposed SSH Port in 22",
						"affected_resource": "www.model.test.example.com",
						"fingerprint":       "v2ModelMockFingerprint",
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"time":        "2021-01-22 16:03:25",
						"score":       float64(7.0),
						"details":     "Exposed SSH Port in 22",
						"fingerprint": "v2ModelMockFingerprint",
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2021-01-20 16:03:25",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "www.model.test.example.com",
							Score:            7.0,
							Status:           "OPEN",
							Details:          "Exposed SSH Port in 22",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Exposed SSH Ports",
								CWEID:       1,
								Description: "An SSH port is accessible from the public internet",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.model.test.example.com",
							},
						},
						Source: store.Source{
							Instance: "aaaaaaaa-0000-0000-0000-000000000003",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-model-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:model",
				},
			},
		},
		{
			name: "Should fix finding with continued lifecycle from v1 model to v2 model instead of invalidating it",
			checkData: `
				{
			        "id":"aaaaaaaa-0000-0000-0000-000000000004",
			        "checktype_name":"vulcan-model-bis-check",
			        "status":"FINISHED",
			        "target":"www.model.test.bis.example.com",
			        "options":"{}",
			        "report":"https://dummy.com/v1/reports/aaaaaaaa-0000-0000-0000-000000000004.json",
			        "tag":"adrn:adevinta:team:modelbis"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "Certificate Host Mismatch",
						"description": "Certificate Host Mismatch Mock Desc",
						"cwe_id":      int64(1),
					},
				},
				expectedData{
					table: utils.TargetsTable,
					data: map[string]interface{}{
						"identifier": "www.model.test.bis.example.com",
					},
				},
				expectedData{
					table: utils.SourcesTable,
					data: map[string]interface{}{
						"name":      "vulcan",
						"component": "vulcan-model-bis-check",
						"instance":  "aaaaaaaa-0000-0000-0000-000000000004",
						"options":   "{}",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"status":            "FIXED",
						"score":             float64(7.0),
						"details":           "",
						"affected_resource": "www.model.test.bis.example.com",
						"fingerprint":       "mockV2FingerPrint",
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2021-02-20 16:03:25",
						"fixed_at": "2021-02-23 16:03:25",
						"ttr":      int64(72),
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "www.model.test.bis.example.com",
							Score:            7.0,
							Status:           "FIXED",
							Details:          "",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Certificate Host Mismatch",
								CWEID:       1,
								Description: "Certificate Host Mismatch Mock Desc",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.model.test.bis.example.com",
							},
						},
						Source: store.Source{
							Instance: "aaaaaaaa-0000-0000-0000-000000000022",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-model-bis-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:modelbis",
				},
			},
		},
		{
			name: "Happy path v2",
			checkData: `
				{
			        "id":"bbbbbbbb-0000-0000-0000-000000000001",
			        "checktype_name":"vulcan-mock-check-v2",
			        "status":"FINISHED",
			        "target":"www.v2.adevinta.com",
			        "options":"{}",
			        "report":"https://dummy.com/v1/reports/bbbbbbbb-0000-0000-0000-000000000001.json",
			        "tag":"adrn:adevinta:team:security"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "Managed AWS databases using CA about to expire v2",
						"description": "Mock description v2",
						"cwe_id":      int64(216),
					},
				},
				expectedData{
					table: utils.TargetsTable,
					data: map[string]interface{}{
						"identifier": "www.v2.adevinta.com",
					},
				},
				expectedData{
					table: utils.SourcesTable,
					data: map[string]interface{}{
						"name":      "vulcan",
						"component": "vulcan-mock-check-v2",
						"instance":  "bbbbbbbb-0000-0000-0000-000000000001",
						"options":   "{}",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"status":                   "OPEN",
						"score":                    float64(8.0),
						"details":                  "Managed AWS details",
						"affected_resource":        "arn:aws:rds:eu-west-1:123456789012:db:myRDS",
						"affected_resource_string": "MyRDS",
						"fingerprint":              "v2MockFingerprint01",
						"resources":                []byte(`[{"name": "resource name", "resources": null, "attributes": null}]`),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"time":      "2020-01-21 16:03:25",
						"score":     float64(8.0),
						"details":   "Managed AWS details",
						"resources": []byte(`[{"name": "resource name", "resources": null, "attributes": null}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-21 16:03:25",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "MyRDS",
							Score:            8.0,
							Status:           "OPEN",
							Details:          "Managed AWS details",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Managed AWS databases using CA about to expire v2",
								CWEID:       216,
								Description: "Mock description v2",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.v2.adevinta.com",
							},
						},
						Source: store.Source{
							Instance: "bbbbbbbb-0000-0000-0000-000000000001",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-mock-check-v2",
							},
						},
					},
					Tag: "adrn:adevinta:team:security",
				},
			},
		},
		{
			name: "Should fix initial v2 finding",
			checkData: `
				{
					"id":"bbbbbbbb-0000-0000-0000-000000000002",
					"checktype_name":"vulcan-initial-v2-check",
					"status":"FINISHED",
					"target":"www.initial.v2.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/bbbbbbbb-0000-0000-0000-000000000002.json",
					"tag":"adrn:adevinta:team:initialv2"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000008",
						"target_id":         "a0000000-0000-0000-0000-000000000008",
						"affected_resource": "arn:aws:ec2:region:777788889999:vpc/vpc-11223344556677889",
						"fingerprint":       "v2InitialFP",
						"status":            "FIXED",
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 00:00:00",
						"fixed_at": "2020-01-01 10:00:00",
						"ttr":      int64(10),
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:777788889999:vpc/vpc-11223344556677889",
							Score:            7.0,
							Status:           "FIXED",
							Details:          "",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial issue v2",
								CWEID:       1,
								Description: "Initial issue v2 description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "bbbbbbbb-0000-0000-0000-000000000000",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:initialv2",
				},
			},
		},
		{
			name: "Should create new finding event for initial v2 finding",
			checkData: `
			{
				"id":"bbbbbbbb-0000-0000-0000-000000000003",
				"checktype_name":"vulcan-initial-v2-check",
				"status":"FINISHED",
				"target":"www.initial.v2.example.com",
				"options":"{}",
				"report":"https://dummy.com/v1/reports/bbbbbbbb-0000-0000-0000-000000000003.json",
				"tag":"adrn:adevinta:team:initialv2"
			}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":                 "c0000000-0000-0000-0000-000000000008",
						"target_id":                "a0000000-0000-0000-0000-000000000008",
						"status":                   "OPEN",
						"score":                    float64(7.0),
						"details":                  "Managed AWS details - modified",
						"affected_resource":        "arn:aws:ec2:region:777788889999:vpc/vpc-11223344556677889",
						"affected_resource_string": "",
						"fingerprint":              "v2InitialFP",
						"resources":                []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-2009-3023"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 00:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":                    float64(7.0),
						"time":                     "2020-01-02 10:00:00",
						"affected_resource_string": "",
						"details":                  "Managed AWS details - modified",
						"resources":                []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-2009-3023"}], "attributes": ["CVE"]}]`),
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:777788889999:vpc/vpc-11223344556677889",
							Score:            7.0,
							Status:           "OPEN",
							Details:          "Managed AWS details - modified",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial issue v2",
								CWEID:       1,
								Description: "Initial issue v2 description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "bbbbbbbb-0000-0000-0000-000000000003",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:initialv2",
				},
			},
		},
		{
			name: "Should reopen initial fixed v2 finding",
			checkData: `
				{
					"id":"bbbbbbbb-0000-0000-0000-000000000004",
					"checktype_name":"vulcan-initial-fixed-v2-check",
					"status":"FINISHED",
					"target":"www.initial.fixed.v2.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/bbbbbbbb-0000-0000-0000-000000000004.json",
					"tag":"adrn:adevinta:team:fixedv2"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000009",
						"target_id":         "a0000000-0000-0000-0000-000000000009",
						"status":            "OPEN",
						"score":             float64(9.0),
						"details":           "Initial fixed issue details",
						"affected_resource": "arn:aws:ec2:region:777788889999:sg/sg-11223344556677889",
						"fingerprint":       "v2FixedFP",
						"resources":         []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-8888-9999"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-03 01:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(9.0),
						"time":        "2020-01-03 01:00:00",
						"details":     "Initial fixed issue details",
						"fingerprint": "v2FixedFP",
						"resources":   []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-8888-9999"}], "attributes": ["CVE"]}]`),
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:777788889999:sg/sg-11223344556677889",
							Score:            9.0,
							Status:           "OPEN",
							Details:          "Initial fixed issue details",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial fixed issue v2",
								CWEID:       2,
								Description: "Initial fixed issue description v2",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.fixed.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "bbbbbbbb-0000-0000-0000-000000000004",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-fixed-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:fixedv2",
				},
			},
		},
		{
			name: "Should reopen initial v2 fixed finding via 'cross checktype'",
			checkData: `
					{
						"id":"bbbbbbbb-0000-0000-0000-000000000005",
						"checktype_name":"vulcan-cross-checktype-v2-check",
						"status":"FINISHED",
						"target":"www.initial.fixed.v2.example.com",
						"options":"{}",
						"report":"https://dummy.com/v1/reports/bbbbbbbb-0000-0000-0000-000000000005.json",
						"tag":"adrn:adevinta:team:fixedv2"
					}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":                 "c0000000-0000-0000-0000-000000000009",
						"target_id":                "a0000000-0000-0000-0000-000000000009",
						"status":                   "OPEN",
						"score":                    float64(6.0),
						"details":                  "Initial fixed issue details - modified",
						"affected_resource":        "arn:aws:ec2:region:777788889999:sg/sg-11223344556677889",
						"affected_resource_string": "Updated resource",
						"fingerprint":              "v2FixedFP",
						"resources":                []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-9999-9999"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-03 01:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":                    float64(6.0),
						"time":                     "2020-01-03 01:00:00",
						"details":                  "Initial fixed issue details - modified",
						"fingerprint":              "v2FixedFP",
						"affected_resource_string": "Updated resource",
						"resources":                []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-9999-9999"}], "attributes": ["CVE"]}]`),
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "Updated resource",
							Score:            6.0,
							Status:           "OPEN",
							Details:          "Initial fixed issue details - modified",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial fixed issue v2",
								CWEID:       2,
								Description: "Initial fixed issue description v2",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.fixed.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "bbbbbbbb-0000-0000-0000-000000000005",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-cross-checktype-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:fixedv2",
				},
			},
		},
		{
			name: "Should open multiple new v2 findings",
			checkData: `
				{
					"id":"bbbbbbbb-0000-0000-0000-000000000006",
					"checktype_name":"vulcan-new-v2-check",
					"status":"FINISHED",
					"target":"www.new.v2.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/bbbbbbbb-0000-0000-0000-000000000006.json",
					"tag":"adrn:adevinta:team:newv2"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "New issue one v2",
						"description": "New issue one description v2",
						"cwe_id":      int64(3),
					},
				},
				expectedData{
					table: utils.TargetsTable,
					data: map[string]interface{}{
						"identifier": "www.new.v2.example.com",
					},
				},
				expectedData{
					table: utils.SourcesTable,
					data: map[string]interface{}{
						"name":      "vulcan",
						"component": "vulcan-new-v2-check",
						"instance":  "bbbbbbbb-0000-0000-0000-000000000006",
						"options":   "{}",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"status":            "OPEN",
						"score":             float64(5.0),
						"details":           "New issue one details",
						"affected_resource": "arn:aws:ec2:region:777788889999:sg/sg-1",
						"fingerprint":       "v2MockFingerprintA",
						"resources":         []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-0000-0001"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(5.0),
						"time":        "2020-01-04 01:00:00",
						"details":     "New issue one details",
						"fingerprint": "v2MockFingerprintA",
						"resources":   []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-0000-0001"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-04 01:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "New issue two v2",
						"description": "New issue two description v2",
						"cwe_id":      int64(4),
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						// issue_id will be overwritten in
						// related data map when parsing this
						// due to just retrieved issue, which
						// will lead to new finding 'two'
						// being retrieved instead of 'one'.
						"status":            "OPEN",
						"score":             float64(6.0),
						"details":           "New issue two details",
						"affected_resource": "arn:aws:ec2:region:777788889999:sg/sg-2",
						"fingerprint":       "v2MockFingerprintB",
						"resources":         []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-0000-0002"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(6.0),
						"time":        "2020-01-04 01:00:00",
						"details":     "New issue two details",
						"fingerprint": "v2MockFingerprintB",
						"resources":   []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-0000-0002"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-04 01:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:777788889999:sg/sg-1",
							Score:            5.0,
							Status:           "OPEN",
							Details:          "New issue one details",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "New issue one v2",
								CWEID:       3,
								Description: "New issue one description v2",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.new.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "bbbbbbbb-0000-0000-0000-000000000006",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-new-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:newv2",
				},
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:777788889999:sg/sg-2",
							Score:            6.0,
							Status:           "OPEN",
							Details:          "New issue two details",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "New issue two v2",
								CWEID:       4,
								Description: "New issue two description v2",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.new.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "bbbbbbbb-0000-0000-0000-000000000006",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-new-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:newv2",
				},
			},
		},
		{
			name: "Should reopen initially EXPIRED v2 finding",
			checkData: `
				{
					"id":"bbbbbbbb-0000-0000-0000-000000000007",
					"checktype_name":"vulcan-initial-expired-v2-check",
					"status":"FINISHED",
					"target":"www.initial.expired.v2.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/bbbbbbbb-0000-0000-0000-000000000007.json",
					"tag":"adrn:adevinta:team:expiredv2"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "Initial expired issue v2",
						"description": "Initial expired issue description v2",
						"cwe_id":      int64(2),
					},
				},
				expectedData{
					table: utils.TargetsTable,
					data: map[string]interface{}{
						"identifier": "www.initial.expired.v2.example.com",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"status":            "OPEN",
						"score":             float64(9.0),
						"details":           "Initial expired issue details",
						"affected_resource": "arn:aws:ec2:region:777788889999:sg/sg-1111",
						"fingerprint":       "v2ExpiredFP",
						"resources":         []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-1111-1111"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at":   "2020-01-01 01:00:00",
						"fixed_at":   nil,
						"ttr":        nil,
						"expired_at": nil,
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:777788889999:sg/sg-1111",
							Score:            9.0,
							Status:           "OPEN",
							Details:          "Initial expired issue details",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial expired issue v2",
								CWEID:       2,
								Description: "Initial expired issue description v2",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.expired.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "bbbbbbbb-0000-0000-0000-000000000007",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-expired-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:expiredv2",
				},
			},
		},
		{
			name: "Should fix initially EXPIRED v2 finding",
			checkData: `
				{
					"id":"bbbbbbbb-0000-0000-0000-000000000008",
					"checktype_name":"vulcan-initial-expired-v2-check",
					"status":"FINISHED",
					"target":"www.initial.expired.v2.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/bbbbbbbb-0000-0000-0000-000000000008.json",
					"tag":"adrn:adevinta:team:expiredv2"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "Initial expired issue v2",
						"description": "Initial expired issue description v2",
						"cwe_id":      int64(2),
					},
				},
				expectedData{
					table: utils.TargetsTable,
					data: map[string]interface{}{
						"identifier": "www.initial.expired.v2.example.com",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"affected_resource": "arn:aws:ec2:region:777788889999:sg/sg-1111",
						"fingerprint":       "v2ExpiredFP",
						"status":            "FIXED",
						"score":             float64(9.0),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at":   "2020-01-01 01:00:00",
						"fixed_at":   "2020-03-01 01:00:00",
						"ttr":        int64(1440),
						"expired_at": nil,
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:777788889999:sg/sg-1111",
							Score:            9.0,
							Status:           "FIXED",
							Details:          "",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial expired issue v2",
								CWEID:       2,
								Description: "Initial expired issue description v2",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.expired.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeeb",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-expired-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:expiredv2",
				},
			},
		},
		{
			name: "Should fix first initial double v2 finding and keep the second one open",
			checkData: `
				{
					"id":"bbbbbbbb-0000-0000-0000-000000000009",
					"checktype_name":"vulcan-initial-double-v2-check",
					"status":"FINISHED",
					"target":"www.initial.double.v2.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/bbbbbbbb-0000-0000-0000-000000000009.json",
					"tag":"adrn:adevinta:team:initialdoublev2"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000013",
						"target_id":         "a0000000-0000-0000-0000-000000000013",
						"affected_resource": "arn:aws:ec2:region:000011112222:vpc/vpc-99887766554433221",
						"fingerprint":       "v2InitialBisFP",
						"status":            "FIXED",
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 00:00:00",
						"fixed_at": "2020-01-01 10:00:00",
						"ttr":      int64(10),
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000013",
						"target_id":         "a0000000-0000-0000-0000-000000000013",
						"affected_resource": "arn:aws:ec2:region:333355557777:vpc/vpc-22553311007788996",
						"fingerprint":       "v2InitialBis2FP",
						"status":            "OPEN",
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(7.0),
						"time":        "2020-01-01 10:00:00",
						"fingerprint": "v2InitialBis2FP",
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 01:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:000011112222:vpc/vpc-99887766554433221",
							Score:            7.0,
							Status:           "FIXED",
							Details:          "",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial double issue v2",
								CWEID:       1,
								Description: "Initial double issue v2 description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.double.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "bbbbbbbb-0000-0000-0000-000000000014",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-double-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:initialdoublev2",
				},
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:333355557777:vpc/vpc-22553311007788996",
							Score:            7.0,
							Status:           "OPEN",
							Details:          "",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial double issue v2",
								CWEID:       1,
								Description: "Initial double issue v2 description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.double.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "bbbbbbbb-0000-0000-0000-000000000009",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-double-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:initialdoublev2",
				},
			},
		},
		{
			name: "Should not reopen v2 finding marked as false positive",
			checkData: `
				{
					"id":"bbbbbbbb-0000-0000-0000-FFFFFFFFFFFF",
					"checktype_name":"vulcan-initial-false-positive-v2-check",
					"status":"FINISHED",
					"target":"www.initial.false.positive.v2.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/bbbbbbbb-0000-0000-0000-FFFFFFFFFFFF.json",
					"tag":"adrn:adevinta:team:falsepositivev2"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000011",
						"target_id":         "a0000000-0000-0000-0000-000000000011",
						"status":            "FALSE_POSITIVE",
						"score":             float64(9.0),
						"details":           "Initial false positive issue details",
						"affected_resource": "arn:aws:ec2:region:777788889999:sg/sg-FFFF",
						"fingerprint":       "v2FalseFP",
						"resources":         []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-FFFF-FFFF"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 01:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(9.0),
						"time":        "2020-01-02 01:00:00",
						"details":     "Initial false positive issue details",
						"fingerprint": "v2FalseFP",
						"resources":   []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-FFFF-FFFF"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(9.0),
						"time":        "2020-01-01 01:00:00",
						"fingerprint": "v2FalseFP",
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:777788889999:sg/sg-FFFF",
							Score:            9.0,
							Status:           "FALSE_POSITIVE",
							Details:          "Initial false positive issue details",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial false positive issue v2",
								CWEID:       2,
								Description: "Initial false positive description v2",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.false.positive.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "bbbbbbbb-0000-0000-0000-FFFFFFFFFFFF",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-false-positive-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:falsepositivev2",
				},
			},
		},
		{
			name: "Should not fix v2 finding marked as false positive",
			checkData: `
				{
					"id":"bbbbbbbb-0000-0000-0000-FFFFFFFFFFF0",
					"checktype_name":"vulcan-initial-false-positive-v2-check",
					"status":"FINISHED",
					"target":"www.initial.false.positive.v2.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/bbbbbbbb-0000-0000-0000-FFFFFFFFFFF0.json",
					"tag":"adrn:adevinta:team:falsepositivev2"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000011",
						"target_id":         "a0000000-0000-0000-0000-000000000011",
						"affected_resource": "arn:aws:ec2:region:777788889999:sg/sg-FFFF",
						"fingerprint":       "v2FalseFP",
						"status":            "FALSE_POSITIVE",
						"score":             float64(9.0),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 01:00:00",
						"fixed_at": "2020-01-03 01:00:00",
						"ttr":      int64(48),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(9.0),
						"time":        "2020-01-01 01:00:00",
						"fingerprint": "v2FalseFP",
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:777788889999:sg/sg-FFFF",
							Score:            9.0,
							Status:           "FALSE_POSITIVE",
							Details:          "",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial false positive issue v2",
								CWEID:       2,
								Description: "Initial false positive description v2",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.false.positive.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "eeeeeeee-eeee-eeee-eeee-eeeeeeeeee11",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-false-positive-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:falsepositivev2",
				},
			},
		},
		{
			name: "Should not reopen v2 finding marked as false positive - previously FIXED",
			checkData: `
				{
					"id":"bbbbbbbb-0000-0000-0000-FFFFFFFFFFF2",
					"checktype_name":"vulcan-initial-false-positive-v2-check",
					"status":"FINISHED",
					"target":"www.initial.false.positive.2.v2.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/bbbbbbbb-0000-0000-0000-FFFFFFFFFFF2.json",
					"tag":"adrn:adevinta:team:falsepositivev2"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000011",
						"target_id":         "a0000000-0000-0000-0000-000000000012",
						"status":            "FALSE_POSITIVE",
						"score":             float64(9.0),
						"details":           "Initial false positive issue details",
						"affected_resource": "arn:aws:ec2:region:777788889999:sg/sg-FFF2",
						"resources":         []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-FFFF-FFFF"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-03 01:00:00",
						"ttr":      nil,
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 01:00:00",
						"fixed_at": "2020-01-01 02:00:00",
						"ttr":      int64(1),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(9.0),
						"time":        "2020-01-03 01:00:00",
						"details":     "Initial false positive issue details",
						"fingerprint": "v2FalseFixedFP",
						"resources":   []byte(`[{"name": "resource name", "resources": [{"CVE": "CVE-FFFF-FFFF"}], "attributes": ["CVE"]}]`),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(9.0),
						"time":        "2020-01-01 01:00:00",
						"fingerprint": "v2FalseFixedFP",
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:777788889999:sg/sg-FFF2",
							Score:            9.0,
							Status:           "FALSE_POSITIVE",
							Details:          "Initial false positive issue details",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial false positive issue v2",
								CWEID:       2,
								Description: "Initial false positive description v2",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.false.positive.2.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "bbbbbbbb-0000-0000-0000-FFFFFFFFFFF2",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-false-positive-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:falsepositivev2",
				},
			},
		},
		{
			name: "Should not FIX v2 finding marked as false positive - previously FIXED",
			checkData: `
				{
					"id":"bbbbbbbb-0000-0000-0000-FFFFFFFFFFF3",
					"checktype_name":"vulcan-initial-false-positive-v2-check",
					"status":"FINISHED",
					"target":"www.initial.false.positive.2.v2.example.com",
					"options":"{}",
					"report":"https://dummy.com/v1/reports/bbbbbbbb-0000-0000-0000-FFFFFFFFFFF3.json",
					"tag":"adrn:adevinta:team:falsepositivev2"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"issue_id":          "c0000000-0000-0000-0000-000000000011",
						"target_id":         "a0000000-0000-0000-0000-000000000012",
						"affected_resource": "arn:aws:ec2:region:777788889999:sg/sg-FFF2",
						"fingerprint":       "v2FalseFixedFP",
						"status":            "FALSE_POSITIVE",
						"score":             float64(9.0),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 01:00:00",
						"fixed_at": "2020-01-01 02:00:00",
						"ttr":      int64(1),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"score":       float64(9.0),
						"time":        "2020-01-01 01:00:00",
						"fingerprint": "v2FalseFixedFP",
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:777788889999:sg/sg-FFF2",
							Score:            9.0,
							Status:           "FALSE_POSITIVE",
							Details:          "",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial false positive issue v2",
								CWEID:       2,
								Description: "Initial false positive description v2",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.false.positive.2.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeb5",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-false-positive-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:falsepositivev2",
				},
			},
		},
		{
			name: "Should reopen FALSE POSITIVE v2 finding due to fingerprint variation",
			checkData: `
				{
			        "id":"bbbbbbbb-0000-0000-0000-FFFFFFFFFFF4",
			        "checktype_name":"vulcan-initial-false-positive-v2-check",
			        "status":"FINISHED",
			        "target":"www.initial.false.positive.v2.example.com",
			        "options":"{}",
			        "report":"https://dummy.com/v1/reports/bbbbbbbb-0000-0000-0000-FFFFFFFFFFF4.json",
			        "tag":"adrn:adevinta:team:falsepositivev2"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "Initial false positive issue v2",
						"description": "Initial false positive description v2",
						"cwe_id":      int64(2),
					},
				},
				expectedData{
					table: utils.TargetsTable,
					data: map[string]interface{}{
						"identifier": "www.initial.false.positive.v2.example.com",
					},
				},
				expectedData{
					table: utils.SourcesTable,
					data: map[string]interface{}{
						"name":      "vulcan",
						"component": "vulcan-initial-false-positive-v2-check",
						"instance":  "bbbbbbbb-0000-0000-0000-FFFFFFFFFFF4",
						"options":   "{}",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"status":            "OPEN",
						"score":             float64(9.0),
						"affected_resource": "arn:aws:ec2:region:777788889999:sg/sg-FFFF",
						"fingerprint":       "v2FalseChangedFP",
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"time":        "2020-01-01 01:00:00",
						"score":       float64(9.0),
						"fingerprint": "v2FalseFP",
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"time":        "2021-01-21 16:03:25",
						"score":       float64(9.0),
						"fingerprint": "v2FalseChangedFP",
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2020-01-01 01:00:00",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "arn:aws:ec2:region:777788889999:sg/sg-FFFF",
							Score:            9.0,
							Status:           "OPEN",
							Details:          "",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Initial false positive issue v2",
								CWEID:       2,
								Description: "Initial false positive description v2",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "www.initial.false.positive.v2.example.com",
							},
						},
						Source: store.Source{
							Instance: "bbbbbbbb-0000-0000-0000-FFFFFFFFFFF4",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-initial-false-positive-v2-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:falsepositivev2",
				},
			},
		},
		{
			name: "Should handle NULL unicode character",
			checkData: `
				{
			        "id":"uuuuuuuu-0000-0000-0000-000000000001",
			        "checktype_name":"vulcan-unicode-check",
			        "status":"FINISHED",
			        "target":"unicode.example.com",
			        "options":"{}",
			        "report":"https://dummy.com/v1/reports/uuuuuuuu-0000-0000-0000-000000000001.json",
			        "tag":"adrn:adevinta:team:security"
				}`,
			expected: []expectedData{
				expectedData{
					table: utils.IssuesTable,
					data: map[string]interface{}{
						"summary":     "Unicode character vulnerability",
						"description": "Unicode character vulnerability description",
						"cwe_id":      int64(2),
					},
				},
				expectedData{
					table: utils.TargetsTable,
					data: map[string]interface{}{
						"identifier": "unicode.example.com",
					},
				},
				expectedData{
					table: utils.SourcesTable,
					data: map[string]interface{}{
						"name":      "vulcan",
						"component": "vulcan-unicode-check",
						"instance":  "uuuuuuuu-0000-0000-0000-000000000001",
						"options":   "{}",
					},
				},
				expectedData{
					table: utils.FindingsTable,
					data: map[string]interface{}{
						"status":            "OPEN",
						"score":             float64(6.0),
						"details":           "",
						"affected_resource": "unicode.example.com/encoding",
						"fingerprint":       "default",
						"resources":         []byte(`[{"name": "Unicode character", "resources": [{"String": "\\u0000unicodechar\u0002h)h-C\by\u001e\u0001..."}], "attributes": ["String"]}]`),
					},
				},
				expectedData{
					table: utils.FEventsTable,
					data: map[string]interface{}{
						"time":        "2022-01-01 16:03:25",
						"score":       float64(6.0),
						"details":     "",
						"fingerprint": "default",
						"resources":   []byte(`[{"name": "Unicode character", "resources": [{"String": "\\u0000unicodechar\u0002h)h-C\by\u001e\u0001..."}], "attributes": ["String"]}]`),
					},
				},
				expectedData{
					table: utils.FExposuresTable,
					data: map[string]interface{}{
						"found_at": "2022-01-01 16:03:25",
						"fixed_at": nil,
						"ttr":      nil,
					},
				},
			},
			expectedNotifs: []processor.FindingNotification{
				{
					FindingExpanded: store.FindingExpanded{
						Finding: store.Finding{
							AffectedResource: "unicode.example.com/encoding",
							Score:            6.0,
							Status:           "OPEN",
							Details:          "",
						},
						Issue: store.IssueLabels{
							Issue: store.Issue{
								Summary:     "Unicode character vulnerability",
								CWEID:       2,
								Description: "Unicode character vulnerability description",
							},
						},
						Target: store.TargetTeams{
							Target: store.Target{
								Identifier: "unicode.example.com",
							},
						},
						Source: store.Source{
							Instance: "uuuuuuuu-0000-0000-0000-000000000001",
							Options:  "{}",
							SourceFamily: store.SourceFamily{
								Name:      "vulcan",
								Component: "vulcan-unicode-check",
							},
						},
					},
					Tag: "adrn:adevinta:team:security",
				},
			},
		},
	}

	testDB, err := utils.DB()
	if err != nil {
		t.Fatalf("Error connecting to test DB: %v", err)
	}

	mockNotifier := &mockNotifier{}
	mockResClient := &mockResultsClient{}
	checksProcessor := setupProcessor(t, mockNotifier, mockResClient)

	for _, tc := range testCases {
		mockNotifier.reset()
		err := utils.ResetDB()
		if err != nil {
			t.Fatalf("Error resetting DB: %v", err)
		}

		t.Run(tc.name, func(t *testing.T) {
			// Serialize check data into a mock
			// SNS notification.
			checkMssg, err := serializeCheckMssg(tc.checkData)
			if err != nil {
				t.Fatalf("Error serializing check mssg: %v", err)
			}

			// Process check message.
			err = checksProcessor.ProcessMessage(checkMssg)
			if err != nil {
				t.Fatalf("Error processing mssg: %v", err)
			}

			// Check expected data.
			err = checkData(t, tc.expected, testDB)
			if err != nil {
				t.Fatalf("Error checking expected data: %v", err)
			}

			// Check notifications
			if diff, ok := mockNotifier.verify(tc.expectedNotifs); !ok {
				t.Fatalf("Error verifying notifications, diff:\n%v", diff)
			}
		})
	}
}

// TestProcessorConcurrency tests the checks processor concurrency
// when processing multiple check messages related to the same finding.
// Additionally, the check messages are not correlative, that means that
// the order of the messages in the 'queue' (a slice iterated from 0..N)
// does not match their execution order.
//
// To test this we create a processor pool with one processor for each
// message in the queue, and concurrenlty make each processor process
// one of the messages. We wait for the processors to finish, and then
// compare the DB data with the expected data. In this case the main
// fields to verify are the finding status and the finding exposures,
// becouse these are the fields that can particularly be messed up
// when handling concurrency wrongly.
func TestProcessorConcurrency(t *testing.T) {
	// checks is a slice of unordered check messages.
	// That means that their position in the slice does not represent
	// the time of execution specified in the reports related to them.
	// (For 'test reading clearness', check IDs specify the real
	// check execution order).
	checks := []string{
		`{
			"id":"10000000-0000-0000-0000-000000000002",
			"checktype_name":"vulcan-initial-check",
			"status":"FINISHED",
			"target":"www.initial.example.com",
			"options":"{}",
			"report":"https://dummy.com/v1/reports/10000000-0000-0000-0000-000000000002.json",
			"tag":"adrn:adevinta:team:initial"
		}`,
		`{
			"id":"10000000-0000-0000-0000-000000000001",
			"checktype_name":"vulcan-initial-check",
			"status":"FINISHED",
			"target":"www.initial.example.com",
			"options":"{}",
			"report":"https://dummy.com/v1/reports/10000000-0000-0000-0000-000000000001.json",
			"tag":"adrn:adevinta:team:initial"
		}`,
		`{
			"id":"aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa",
			"checktype_name":"vulcan-initial-check",
			"status":"FAILED",
			"target":"www.initial.example.com",
			"options":"{}",
			"report":"https://dummy.com/v1/reports/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa.json",
			"tag":"adrn:adevinta:team:initial"
		}`,
		`{
			"id":"10000000-0000-0000-0000-000000000005",
			"checktype_name":"vulcan-initial-check",
			"status":"FINISHED",
			"target":"www.initial.example.com",
			"options":"{}",
			"report":"https://dummy.com/v1/reports/10000000-0000-0000-0000-000000000005.json",
			"tag":"adrn:adevinta:team:initial"
		}`,
		`{
			"id":"10000000-0000-0000-0000-000000000004",
			"checktype_name":"vulcan-initial-check",
			"status":"FINISHED",
			"target":"www.initial.example.com",
			"options":"{}",
			"report":"https://dummy.com/v1/reports/10000000-0000-0000-0000-000000000004.json",
			"tag":"adrn:adevinta:team:initial"
		}`,
		`{
			"id":"10000000-0000-0000-0000-000000000003",
			"checktype_name":"vulcan-initial-check",
			"status":"FINISHED",
			"target":"www.initial.example.com",
			"options":"{}",
			"report":"https://dummy.com/v1/reports/10000000-0000-0000-0000-000000000003.json",
			"tag":"adrn:adevinta:team:initial"
		}`,
	}

	expected := []expectedData{
		expectedData{
			table: utils.SourcesTable,
			data: map[string]interface{}{
				"name":      "vulcan",
				"component": "vulcan-initial-check",
				"instance":  "10000000-0000-0000-0000-000000000001",
				"options":   "{}",
			},
		},
		expectedData{
			table: utils.SourcesTable,
			data: map[string]interface{}{
				"name":      "vulcan",
				"component": "vulcan-initial-check",
				"instance":  "10000000-0000-0000-0000-000000000002",
				"options":   "{}",
			},
		},
		expectedData{
			table: utils.SourcesTable,
			data: map[string]interface{}{
				"name":      "vulcan",
				"component": "vulcan-initial-check",
				"instance":  "10000000-0000-0000-0000-000000000003",
				"options":   "{}",
			},
		},
		expectedData{
			table: utils.SourcesTable,
			data: map[string]interface{}{
				"name":      "vulcan",
				"component": "vulcan-initial-check",
				"instance":  "10000000-0000-0000-0000-000000000004",
				"options":   "{}",
			},
		},
		expectedData{
			table: utils.SourcesTable,
			data: map[string]interface{}{
				"name":      "vulcan",
				"component": "vulcan-initial-check",
				"instance":  "10000000-0000-0000-0000-000000000005",
				"options":   "{}",
			},
		},
		expectedData{
			table: utils.FindingsTable,
			data: map[string]interface{}{
				"issue_id":          "c0000000-0000-0000-0000-000000000001",
				"target_id":         "a0000000-0000-0000-0000-000000000001",
				"affected_resource": "www.initial.example.com",
				"score":             float64(7.0),
				"status":            "FIXED",
			},
		},
		expectedData{
			table: utils.FEventsTable,
			data: map[string]interface{}{
				"finding_id": "f0000000-0000-0000-0000-000000000001",
				"score":      float64(7.0),
				"time":       "2020-01-02 01:00:00",
			},
		},
		expectedData{
			table: utils.FEventsTable,
			data: map[string]interface{}{
				"finding_id": "f0000000-0000-0000-0000-000000000001",
				"score":      float64(7.0),
				"time":       "2020-01-04 01:00:00",
			},
		},
		expectedData{
			table: utils.FEventsTable,
			data: map[string]interface{}{
				"finding_id": "f0000000-0000-0000-0000-000000000001",
				"score":      float64(7.0),
				"time":       "2020-01-05 01:00:00",
			},
		},
		expectedData{
			table: utils.FExposuresTable,
			data: map[string]interface{}{
				"finding_id": "f0000000-0000-0000-0000-000000000001",
				"found_at":   "2020-01-01 00:00:00",
				"fixed_at":   "2020-01-03 01:00:00",
				"ttr":        int64(24*2 + 1),
			},
		},
		expectedData{
			table: utils.FExposuresTable,
			data: map[string]interface{}{
				"finding_id": "f0000000-0000-0000-0000-000000000001",
				"found_at":   "2020-01-04 01:00:00",
				"fixed_at":   "2020-01-06 01:00:00",
				"ttr":        int64(24 * 2),
			},
		},
	}

	testDB, err := utils.DB()
	if err != nil {
		t.Fatalf("Error connecting to test DB: %v", err)
	}
	err = utils.ResetDB()
	if err != nil {
		t.Fatalf("Error resetting DB: %v", err)
	}

	processorsPool := make([]*processor.CheckProcessor, len(checks))
	for i := 0; i < len(checks); i++ {
		processorsPool[i] = setupProcessor(t, &mockNotifier{}, &mockResultsClient{})
	}

	var wg sync.WaitGroup
	for i, c := range checks {
		wg.Add(1)
		go func(processor *processor.CheckProcessor, check string, wg *sync.WaitGroup) {
			// Serialize check data into a mock
			// SNS notification.
			checkMssg, err := serializeCheckMssg(check)
			if err != nil {
				return
			}

			// Process check message.
			err = processor.ProcessMessage(checkMssg)
			if err != nil {
				return
			}

			wg.Done()
		}(processorsPool[i], c, &wg)
	}

	wg.Wait()

	err = checkData(t, expected, testDB)
	if err != nil {
		t.Fatalf("Error checking expected data: %v", err)
	}
}

func setupProcessor(t *testing.T, notifier notify.Notifier, resultsClient results.Client) *processor.CheckProcessor {
	t.Helper()

	// Build logger.
	logger, _ := test.NewNullLogger()
	// Build DB.
	db, err := store.NewDB(utils.DBConnStr(), logger)
	if err != nil {
		t.Fatalf("Error connecting to DB: %v", err)
	}

	// Build processor.
	processor, err := processor.NewCheckProcessor(notifier, db, resultsClient, "", maxEventAge, logger)
	if err != nil {
		t.Fatalf("Error building processor: %v", err)
	}
	return processor
}

// checkData verifies expected data against data in test DB.
func checkData(t *testing.T, expected []expectedData, db *sqlx.DB) error {
	t.Helper()

	// relatedData holds accumulative
	// data retrieved from DB for each
	// expected data verification.
	//
	// This is due to the fact that, for
	// example, to retrieve a finding, we
	// need the issue_id and target_id
	// related to it, these are autogenerated
	// by the DB, so we con not fix them on
	// the test data. Instead we retrieve them
	// on each data verification iteration
	// and add them to relatedData map so they
	// can be used on the next iterations to
	// verify more 'complex' objects.
	relatedData := map[string]interface{}{}

	for _, ed := range expected {
		// merge expected data with previously
		// retrieved data in case some field
		// is needed for current DB querying.
		// Set 'overwrite' to true because test
		// expected data always has preference.
		mergeMaps(relatedData, ed.data, true)

		data, err := utils.FetchDBData(ed.table, relatedData, db)
		if err != nil {
			return err
		}

		if !isSameData(ed.data, data) {
			return fmt.Errorf("Expected (table: %v):\n%v\nBut got:\n%v", ed.table, ed.data, data)
		}

		// merge current related data
		// with new fetched data so keep
		// collecting related data for
		// next iterations.
		// Set overwrite to true so multiple
		// elements of same type can be retrieved
		// during the same test.
		// (See comment on expected data for test
		// case  'Should open multiple new findings')
		mergeMaps(relatedData, data, true)
	}

	return nil
}

// isSameData compares two maps.
// Returns true if all data in eData map
// is also found in data map.
// Take into consideration that data map
// can have extra data other than the expected.
func isSameData(eData, data map[string]interface{}) bool {
	timeRef := time.Now()

	for k, eValue := range eData {
		value, ok := data[k]
		if !ok {
			return false
		}

		// If value is a Time reference,
		// format it to expected layout.
		if reflect.TypeOf(value) == reflect.TypeOf(timeRef) {
			value = value.(time.Time).Format(timeFmt)
		}

		if !reflect.DeepEqual(value, eValue) {
			return false
		}
	}

	return true
}

// serializeCheckMssg encapsulates the check data into a
// mock SNS notification struct and serializes it into a string.
func serializeCheckMssg(check string) (string, error) {
	notif := processor.Notification{
		Message: check,
	}
	notifJSON, err := json.Marshal(notif)
	return string(notifJSON), err
}

// mergeMaps merges m2 key-values into m1.
// If one key already exists in m1, 'overwrite'
// parameter defines if it is replaced or not.
func mergeMaps(m1, m2 map[string]interface{}, overwrite bool) {
	for k, v := range m2 {
		if _, ok := m1[k]; !ok || overwrite {
			m1[k] = v
		}
	}
}
