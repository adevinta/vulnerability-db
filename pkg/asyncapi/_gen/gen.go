/*
Copyright 2022 Adevinta
*/

package main

import (
	"os"

	"github.com/adevinta/vulnerability-db/pkg/notify"

	"github.com/swaggest/go-asyncapi/reflector/asyncapi-2.4.0"
	"github.com/swaggest/go-asyncapi/spec-2.4.0"
)

type FindingPayload struct {
	notify.FindingNotification
	Version string `header:"version" description:"schema version header" required:"true"`
}

func main() {
	asyncAPI := spec.AsyncAPI{}
	asyncAPI.Info.Version = notify.Version
	asyncAPI.Info.Title = "Vulnerability DB"

	asyncAPI.AddServer("production", spec.Server{
		URL:         "broker.example.com",
		Description: "Dummy server",
		Protocol:    "kafka",
	})

	reflector := asyncapi.Reflector{}
	reflector.Schema = &asyncAPI

	mustNotFail(reflector.AddChannel(asyncapi.ChannelInfo{
		Name: "findings",
		Subscribe: &asyncapi.MessageSample{
			MessageEntity: spec.MessageEntity{
				Name:        "Finding",
				Title:       "Findings state",
				Summary:     "Events generated from Vulnerability DB findings state changes",
				ContentType: "application/json",
			},
			MessageSample: new(FindingPayload),
		},
	}))

	yaml, err := reflector.Schema.MarshalYAML()
	mustNotFail(err)
	mustNotFail(os.WriteFile("../../../docs/asyncapi.yaml", yaml, 0o600))
}

func mustNotFail(err error) {
	if err != nil {
		panic(err)
	}
}
