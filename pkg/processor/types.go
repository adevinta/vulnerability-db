/*
Copyright 2020 Adevinta
*/

package processor

import "github.com/adevinta/vulnerability-db/pkg/store"

// Notification is the message received in the queue from the Vulcan Core SNS topic.
type Notification struct {
	Type             string `json:"Type"`
	MessageID        string `json:"MessageId"`
	TopicArn         string `json:"TopicArn"`
	Subject          string `json:"Subject"`
	Message          string `json:"Message"`
	Timestamp        string `json:"Timestamp"`
	SignatureVersion string `json:"SignatureVersion"`
	Signature        string `json:"Signature"`
	SigningCertURL   string `json:"SigningCertURL"`
	UnsubscribeURL   string `json:"UnsubscribeURL"`
}

// CheckMessage is the information of the check that comes inside the Notification.
type CheckMessage struct {
	ID            string  `json:"id"`
	AgentID       string  `json:"agent_id"`
	ChecktypeID   string  `json:"checktype_id"`
	ChecktypeName string  `json:"checktype_name"`
	Status        string  `json:"status"`
	Target        string  `json:"target"`
	Options       string  `json:"options"`
	Webhook       string  `json:"webhook"`
	Score         float64 `json:"score"`
	Progress      float64 `json:"progress"`
	Raw           string  `json:"raw"`
	Report        string  `json:"report"`
	DeletedAt     string  `json:"deleted_at"`
	CreatedAt     string  `json:"created_at"`
	UpdatedAt     string  `json:"updated_at"`
	ScanID        string  `json:"scan_id"`
	QueueName     string  `json:"queue_name"`
	Tag           string  `json:"tag"`
}

// FindingNotification represents a notification associated with a finding state change.
type FindingNotification struct {
	store.FindingExpanded
	// TODO: Tag field is defined here in order for the FindingNotification struct to be
	// backward compatible with the "old" vulnerability notifications format so integrations
	// with external components that still use the old representation (e.g.: Hermes) are
	// maintained and can be isolated in the notify pkg. Once these integrations are modified
	// to use the new notification format we'll have to decide if we make this tag field
	// serializable into JSON and keep using the tag field as identifier, or we migrate to use
	// the current team identifier.
	Tag string `json:"-"`
}

type vulnerability struct {
	ID          string  `json:"id"`
	Summary     string  `json:"summary"`
	Score       float32 `json:"score"`
	CWEID       uint32  `json:"cwe_id"`
	Description string  `json:"description"`
}
