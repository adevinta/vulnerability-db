/*
Copyright 2020 Adevinta
*/

package store

import "context"

// Target represents the target
// scope for a check execution.
type Target struct {
	ID         string `json:"id"`
	Identifier string `json:"identifier"`
}

// TargetTeams represents a target along with its associated teams.
type TargetTeams struct {
	Target
	Teams []string `json:"teams"`
}

func (db *psqlxStore) CreateTarget(t Target) (*Target, error) {
	var created Target

	query := `
	WITH  exists_query as (
    SELECT * FROM targets 
	WHERE identifier=$1
	), 
	create_query AS (
      INSERT INTO targets (identifier) 
      SELECT $1
      WHERE NOT EXISTS (SELECT 1 FROM exists_query)
      RETURNING *
    )
    SELECT * FROM create_query
    UNION ALL
	SELECT * FROM exists_query`

	row := db.DB.QueryRowContext(context.Background(), query, t.Identifier)
	err := row.Scan(&created.ID, &created.Identifier)
	return &created, err

}

func (db *psqlxStore) FindTarget(t Target) (*Target, error) {
	foundTarget := Target{}
	err := db.DB.Get(&foundTarget, "SELECT * FROM targets WHERE identifier = $1", t.Identifier)
	if err != nil {
		return nil, err
	}

	return &foundTarget, nil
}
