/*
Copyright 2021 Adevinta
*/

package store

// Target represents the target
// scope for a check execution.
type Target struct {
	ID         string
	Identifier string
}

func (db *psqlxStore) CreateTargetIfNotExists(t Target, tags []string) (*Target, error) {
	_, err := db.DB.Exec("INSERT INTO targets (identifier) VALUES ($1)", t.Identifier)
	if err != nil && !IsDuplicateErr(err) { // Target might exist but with a different tag.
		return nil, err
	}

	target, err := db.FindTarget(t)
	if err != nil {
		return nil, err
	}

	for _, tag := range tags {
		if len(tag) == 0 {
			continue
		}
		err = db.createTargetTag(target.ID, tag)
		if err != nil && !IsDuplicateErr(err) {
			return nil, err
		}
	}
	return target, nil
}

func (db *psqlxStore) CreateTarget(t Target, tags []string) (*Target, error) {
	_, err := db.DB.Exec("INSERT INTO targets (identifier) VALUES ($1)", t.Identifier)
	if err != nil {
		return nil, err
	}

	target, err := db.FindTarget(t)
	if err != nil {
		return nil, err
	}

	for _, tag := range tags {
		if len(tag) == 0 {
			continue
		}
		err = db.createTargetTag(target.ID, tag)
		if err != nil {
			return nil, err
		}
	}
	return target, err
}

func (db *psqlxStore) FindTarget(t Target) (*Target, error) {
	foundTarget := Target{}
	err := db.DB.Get(&foundTarget, "SELECT * FROM targets WHERE identifier = $1", t.Identifier)
	if err != nil {
		return nil, err
	}

	return &foundTarget, nil
}

func (db *psqlxStore) createTargetTag(targetID, tag string) error {
	_, err := db.DB.Exec("INSERT INTO target_tags (target_id, tag) VALUES ($1, $2)", targetID, tag)
	return err
}
