/*
Copyright 2020 Adevinta
*/

package store

import (
	"strings"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
)

var (
	stringsSliceComparer = cmpopts.SortSlices(func(a, b interface{}) bool {
		s1 := a.(string)
		s2 := b.(string)
		return strings.Compare(s1, s2) < 0
	})

	findingStateComparer = cmpopts.SortSlices(func(a, b interface{}) bool {
		if _, ok := a.(FindingExposure); ok {
			return compareFindingExposures(a, b)
		}
		e1 := a.(FindingState)
		e2 := b.(FindingState)
		c1 := strings.Compare(e1.ID, e2.ID)
		if c1 != 0 {
			return c1 < 0
		}
		return e1.Score < e2.Score
	})
)

func compareFindingExposures(a, b interface{}) bool {
	e1 := a.(FindingExposure)
	e2 := b.(FindingExposure)
	c1 := strings.Compare(e1.FindingID, e2.FindingID)
	if c1 != 0 {
		return c1 < 0
	}
	return e1.FoundAT.Before(e2.FoundAT)
}

func Test_buildFindingStates(t *testing.T) {
	tests := []struct {
		name              string
		sourceF           []sourceFindings
		wantFindingStates []FindingState
	}{
		{
			name: "buildFindingStatesOldModelHappyPathNewOpen",
			sourceF: []sourceFindings{
				{
					FindingID:   strToPtr("finding1"),
					SourceID:    "source1",
					SourceTime:  mustParseTime("2019-04-10 20:40:56"),
					Score:       intToFloatPtr(1),
					Fingerprint: strToPtr(FindingDefaultFingerprint),
				},
			},
			wantFindingStates: []FindingState{
				{
					ID:          "finding1",
					Status:      "OPEN",
					Score:       1,
					Exposure:    []FindingExposure{{FindingID: "finding1", FoundAT: mustParseTime("2019-04-10 20:40:56")}},
					Fingerprint: FindingDefaultFingerprint,
				},
			},
		},
		{
			name: "buildFindingStatesOldModelHappyPathOpenFixed",
			sourceF: []sourceFindings{
				{
					FindingID:   strToPtr("finding1"),
					SourceID:    "source1",
					SourceTime:  mustParseTime("2019-04-10 20:40:56"),
					Score:       intToFloatPtr(1),
					Fingerprint: strToPtr(FindingDefaultFingerprint),
				},
				{
					FindingID:   nil,
					SourceID:    "source2",
					SourceTime:  mustParseTime("2019-04-11 20:40:56"),
					Score:       nil,
					Fingerprint: nil,
				},
			},
			wantFindingStates: []FindingState{
				{
					ID:     "finding1",
					Status: "FIXED",
					Score:  1,
					Exposure: []FindingExposure{
						{
							FindingID: "finding1",
							FoundAT:   mustParseTime("2019-04-10 20:40:56"),
							FixedAT:   timeToPtr(mustParseTime("2019-04-11 20:40:56")),
							TTR:       intToPtr(24),
						}},
					Fingerprint: FindingDefaultFingerprint,
				},
			},
		},
		{
			name: "buildFindingStatesNewModelHappyPathOpenFixed",
			sourceF: []sourceFindings{
				{
					FindingID:   strToPtr("finding1"),
					SourceID:    "source1",
					SourceTime:  mustParseTime("2019-04-10 20:40:56"),
					Score:       intToFloatPtr(1),
					Fingerprint: strToPtr("000001"),
				},
				{
					FindingID:   nil,
					SourceID:    "source2",
					SourceTime:  mustParseTime("2019-04-11 20:40:56"),
					Score:       nil,
					Fingerprint: nil,
				},
			},
			wantFindingStates: []FindingState{
				{
					ID:     "finding1",
					Status: "FIXED",
					Score:  1,
					Exposure: []FindingExposure{
						{
							FindingID: "finding1",
							FoundAT:   mustParseTime("2019-04-10 20:40:56"),
							FixedAT:   timeToPtr(mustParseTime("2019-04-11 20:40:56")),
							TTR:       intToPtr(24),
						}},
					Fingerprint: "000001",
				},
			},
		},
		{
			name: "buildFindingStatesOldModelToNewModel",
			sourceF: []sourceFindings{
				{
					FindingID:     strToPtr("findingOldModel"),
					SourceID:      "source1",
					SourceTime:    mustParseTime("2019-04-10 20:40:56"),
					Score:         intToFloatPtr(1),
					Fingerprint:   strToPtr(FindingDefaultFingerprint),
					CurrentStatus: strToPtr("OPEN"),
				},
				{
					FindingID:   strToPtr("findingNewModel"),
					SourceID:    "source2",
					SourceTime:  mustParseTime("2019-04-11 20:40:56"),
					Score:       intToFloatPtr(1),
					Fingerprint: strToPtr("000001"),
				},
			},
			wantFindingStates: []FindingState{
				{
					ID:     "findingOldModel",
					Status: "INVALIDATED",
					Score:  1,
					Exposure: []FindingExposure{
						{
							FindingID: "findingOldModel",
							FoundAT:   mustParseTime("2019-04-10 20:40:56"),
							FixedAT:   timeToPtr(mustParseTime("2019-04-11 20:40:56")),
							TTR:       intToPtr(24),
						}},
					Fingerprint: FindingDefaultFingerprint,
				},
				{
					ID:     "findingNewModel",
					Status: "OPEN",
					Score:  1,
					Exposure: []FindingExposure{
						{
							FindingID: "findingNewModel",
							FoundAT:   mustParseTime("2019-04-11 20:40:56"),
						},
					},
					Fingerprint: "000001",
				},
			},
		},
		{
			name: "WithAffectedResourceString",
			sourceF: []sourceFindings{
				{
					FindingID:              strToPtr("finding1"),
					SourceID:               "source1",
					SourceTime:             mustParseTime("2019-04-10 20:40:56"),
					Score:                  intToFloatPtr(1),
					Fingerprint:            strToPtr("fingerprint"),
					AffectedResourceString: strToPtr("affected_resource_string"),
				},
			},
			wantFindingStates: []FindingState{
				{
					ID:                     "finding1",
					Status:                 "OPEN",
					Score:                  1,
					Exposure:               []FindingExposure{{FindingID: "finding1", FoundAT: mustParseTime("2019-04-10 20:40:56")}},
					Fingerprint:            "fingerprint",
					AffectedResourceString: strToPtr("affected_resource_string"),
				},
			},
		},
		{
			name: "OverwriteAffectedResourceString",
			sourceF: []sourceFindings{
				{
					FindingID:              strToPtr("finding1"),
					SourceID:               "source1",
					SourceTime:             mustParseTime("2019-04-10 20:40:56"),
					Score:                  intToFloatPtr(1),
					Fingerprint:            strToPtr("fingerprint"),
					AffectedResourceString: strToPtr("affected_resource_string"),
				},
				{
					FindingID:              strToPtr("finding1"),
					SourceID:               "source1",
					SourceTime:             mustParseTime("2019-04-10 20:40:56"),
					Score:                  intToFloatPtr(1),
					Fingerprint:            strToPtr("fingerprint"),
					AffectedResourceString: strToPtr("affected_resource_string_2"),
				},
			},
			wantFindingStates: []FindingState{
				{
					ID:                     "finding1",
					Status:                 "OPEN",
					Score:                  1,
					Exposure:               []FindingExposure{{FindingID: "finding1", FoundAT: mustParseTime("2019-04-10 20:40:56")}},
					Fingerprint:            "fingerprint",
					AffectedResourceString: strToPtr("affected_resource_string_2"),
				},
			},
		},
		{
			name: "RemoveAffectedResourceString",
			sourceF: []sourceFindings{
				{
					FindingID:              strToPtr("finding1"),
					SourceID:               "source1",
					SourceTime:             mustParseTime("2019-04-10 20:40:56"),
					Score:                  intToFloatPtr(1),
					Fingerprint:            strToPtr("fingerprint"),
					AffectedResourceString: strToPtr("affected_resource_string"),
				},
				{
					FindingID:   strToPtr("finding1"),
					SourceID:    "source1",
					SourceTime:  mustParseTime("2019-04-10 20:40:56"),
					Score:       intToFloatPtr(1),
					Fingerprint: strToPtr("fingerprint"),
				},
			},
			wantFindingStates: []FindingState{
				{
					ID:          "finding1",
					Status:      "OPEN",
					Score:       1,
					Exposure:    []FindingExposure{{FindingID: "finding1", FoundAT: mustParseTime("2019-04-10 20:40:56")}},
					Fingerprint: "fingerprint",
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotStates := buildFindingStates(tt.sourceF)
			diff := cmp.Diff(gotStates, tt.wantFindingStates, findingStateComparer)
			if diff != "" {
				t.Errorf("got exposures != wantExposures, diff %s", diff)
			}
		})
	}
}

func Test_buildFindingExposures(t *testing.T) {
	tests := []struct {
		name              string
		sourceF           []sourceFindings
		wantIDs           []string
		wantFindingStates []FindingState
	}{
		{
			name: "BuildsProperFindingExposuresWithMultiplePeriods",
			sourceF: []sourceFindings{
				sourceFindings{
					FindingID:   strToPtr("finding1"),
					SourceID:    "source1",
					SourceTime:  mustParseTime("2019-04-10 20:40:56"),
					Score:       intToFloatPtr(1),
					Fingerprint: strToPtr(FindingDefaultFingerprint),
				},
				sourceFindings{
					FindingID:   strToPtr("finding1"),
					SourceID:    "source2",
					SourceTime:  mustParseTime("2019-04-15 22:58:21"),
					Score:       intToFloatPtr(2),
					Fingerprint: strToPtr(FindingDefaultFingerprint),
				},
				sourceFindings{
					FindingID:   strToPtr("finding1"),
					SourceID:    "source3",
					SourceTime:  mustParseTime("2019-05-08 23:46:36"),
					Score:       intToFloatPtr(3),
					Fingerprint: strToPtr(FindingDefaultFingerprint),
				},

				sourceFindings{
					FindingID:   strToPtr("finding2"),
					SourceID:    "source4",
					SourceTime:  mustParseTime("2019-04-20 00:00:00"),
					Score:       intToFloatPtr(1),
					Fingerprint: strToPtr(FindingDefaultFingerprint),
				},

				sourceFindings{
					FindingID:   strToPtr("finding3"),
					SourceID:    "source5",
					SourceTime:  mustParseTime("2019-06-08 20:47:08"),
					Score:       intToFloatPtr(1),
					Fingerprint: strToPtr(FindingDefaultFingerprint),
				},
			},

			wantFindingStates: []FindingState{
				FindingState{
					ID:          "finding1",
					Status:      "FIXED",
					Score:       3,
					Fingerprint: FindingDefaultFingerprint,
					Exposure: []FindingExposure{
						FindingExposure{
							FindingID: "finding1",
							FoundAT:   mustParseTime("2019-04-10 20:40:56"),
							FixedAT:   timeToPtr(mustParseTime("2019-04-20 00:00:00")),
							TTR:       intToPtr(219),
						},
						FindingExposure{
							FindingID: "finding1",
							FoundAT:   mustParseTime("2019-05-08 23:46:36"),
							FixedAT:   timeToPtr(mustParseTime("2019-06-08 20:47:08")),
							TTR:       intToPtr(741),
						},
					},
				},
				FindingState{
					ID:          "finding2",
					Status:      "FIXED",
					Score:       1,
					Fingerprint: FindingDefaultFingerprint,
					Exposure: []FindingExposure{
						FindingExposure{
							FindingID: "finding2",
							FoundAT:   mustParseTime("2019-04-20 00:00:00"),
							FixedAT:   timeToPtr(mustParseTime("2019-05-08 23:46:36")),
							TTR:       intToPtr(455),
						},
					}},
				FindingState{
					ID:          "finding3",
					Status:      "OPEN",
					Score:       1,
					Fingerprint: FindingDefaultFingerprint,
					Exposure: []FindingExposure{
						FindingExposure{
							FindingID: "finding3",
							FoundAT:   mustParseTime("2019-06-08 20:47:08"),
						},
					},
				},
			},
		},

		{
			name: "BuildsProperFindingExposuresProperScoreAnsStatus",
			sourceF: []sourceFindings{
				sourceFindings{
					FindingID:   strToPtr("finding1"),
					SourceID:    "source1",
					SourceTime:  mustParseTime("2019-04-10 20:40:56"),
					Score:       intToFloatPtr(2),
					Fingerprint: strToPtr(FindingDefaultFingerprint),
				},
				sourceFindings{
					FindingID:   strToPtr("finding1"),
					SourceID:    "source2",
					SourceTime:  mustParseTime("2019-04-15 22:58:21"),
					Score:       intToFloatPtr(2),
					Fingerprint: strToPtr(FindingDefaultFingerprint),
				},
				sourceFindings{
					FindingID:   strToPtr("finding1"),
					SourceID:    "source3",
					SourceTime:  mustParseTime("2019-05-08 23:46:36"),
					Score:       intToFloatPtr(3),
					Fingerprint: strToPtr(FindingDefaultFingerprint),
				},

				sourceFindings{
					FindingID:   strToPtr("finding1"),
					SourceID:    "source5",
					SourceTime:  mustParseTime("2019-06-08 20:47:08"),
					Score:       intToFloatPtr(1),
					Fingerprint: strToPtr(FindingDefaultFingerprint),
				},
			},

			wantFindingStates: []FindingState{
				FindingState{
					ID:          "finding1",
					Status:      "OPEN",
					Score:       1,
					Fingerprint: FindingDefaultFingerprint,
					Exposure: []FindingExposure{
						FindingExposure{
							FindingID: "finding1",
							FoundAT:   mustParseTime("2019-04-10 20:40:56"),
						},
					},
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotStates := buildFindingStates(tt.sourceF)
			diff := cmp.Diff(gotStates, tt.wantFindingStates, findingStateComparer)
			if diff != "" {
				t.Errorf("got exposures != wantExposures, diff %s", diff)
			}
		})
	}
}

func mustParseTime(t string) time.Time {
	r, err := time.Parse("2006-01-02 15:04:05", t)
	if err != nil {
		panic(err)
	}
	return r
}

func strToPtr(s string) *string {
	return &s
}

func timeToPtr(t time.Time) *time.Time {
	return &t
}

func intToPtr(i int) *int {
	return &i
}

func intToFloatPtr(i int) *float64 {
	f := float64(i)
	return &f
}
