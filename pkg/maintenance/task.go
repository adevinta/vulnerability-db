/*
Copyright 2020 Adevinta
*/

package maintenance

import (
	"errors"

	"github.com/adevinta/vulnerability-db/pkg/store"
)

const (
	// Available tasks
	expireFindingsTask = "expire_findings"
)

var (
	// ErrInvalidTask indicates that the task specified does not exist.
	ErrInvalidTask = errors.New("Invalid Task")

	// ErrInvalidOptions indicates that the options specified for a task are not valid.
	ErrInvalidOptions = errors.New("Invalid Options")
)

// Task represents a maintenance task.
type Task interface {
	Name() string
	Type() string
	Execute() (TaskResult, error)
}

// TaskResult is the resulting output
// from a task execution.
type TaskResult string

// NewTask creates a new maintenance task given its name, rate
// and options.
func NewTask(name, taskType string, opts interface{}, store store.VulnStore) (Task, error) {
	switch taskType {
	case expireFindingsTask:
		return buildExpireFindingsTask(name, opts, store)
	default:
		return nil, ErrInvalidTask
	}
}

func buildExpireFindingsTask(name string, opts interface{}, store store.VulnStore) (Task, error) {
	options, ok := opts.(map[string]interface{})
	if !ok {
		return nil, ErrInvalidOptions
	}
	source, ok := options["source"].(string)
	if !ok {
		return nil, ErrInvalidOptions
	}
	ttl, ok := options["ttl"].(int64)
	if !ok {
		return nil, ErrInvalidOptions
	}

	return newExpireFindingsTask(name, source, int(ttl), store), nil
}
