/*
Copyright 2021 Adevinta
*/

package maintenance

import (
	"context"
	"errors"
	"time"

	log "github.com/sirupsen/logrus"
)

const (
	maintenanceLogTmpl     = "[MAINTENANCE]: %s"
	maintenanceTaskLogTmpl = "[MAINTENANCE][%s][%s]: %s"

	startLogMssg = "Scheduler started"
	stopLogMssg  = "Scheduler stopped"
)

var (
	// ErrInvalidRate indicates that the rate specified for the task is not valid.
	ErrInvalidRate = errors.New("Invalid rate")
)

// Scheduler is responsible for scheduling and executing
// the maintenance tasks.
type Scheduler struct {
	log   *log.Logger
	tasks []TaskSchedule
	// Create a field for rate units so we
	// can modify it for tests.
	rateUnits time.Duration
}

// TaskSchedule represents a task and its
// execution rate time in hours.
type TaskSchedule struct {
	task Task
	rate int
}

// NewScheduler creates a new maintenance scheduler with given tasks.
func NewScheduler(log *log.Logger, tasks []TaskSchedule) *Scheduler {
	return &Scheduler{
		log:       log,
		tasks:     tasks,
		rateUnits: time.Hour, // Hard coded to hours for non test code.
	}
}

// AddTask adds a new task to the scheduler.
func (s *Scheduler) AddTask(task Task, rate int) error {
	if rate <= 0 {
		return ErrInvalidRate
	}
	s.tasks = append(s.tasks, TaskSchedule{task, rate})
	return nil
}

// Start makes the scheduler start
// executing its tasks.
func (s *Scheduler) Start(ctx context.Context) {
	for _, t := range s.tasks {
		s.scheduleTask(ctx, t)
	}
	s.logInfo(startLogMssg)
}

func (s *Scheduler) scheduleTask(ctx context.Context, t TaskSchedule) {
	ticker := time.NewTicker(time.Duration(t.rate) * s.rateUnits)

	go func(ticker *time.Ticker, task Task) {
		for { // nolint
			select {
			case <-ticker.C:
				res, err := t.task.Execute()
				if err != nil {
					s.logTaskError(task.Name(), task.Type(), err)
				} else {
					s.logTaskResult(task.Name(), task.Type(), res)
				}
			case <-ctx.Done():
				ticker.Stop()
				s.logInfo(stopLogMssg)
				break
			}
		}
	}(ticker, t.task)
}

func (s *Scheduler) logInfo(mssg string) {
	s.log.Infof(maintenanceLogTmpl, mssg)
}

func (s *Scheduler) logTaskResult(taskName, taskType string, taskResult TaskResult) {
	s.log.Debugf(maintenanceTaskLogTmpl, taskType, taskName, taskResult)
}

func (s *Scheduler) logTaskError(taskName, taskType string, err error) {
	s.log.Errorf(maintenanceTaskLogTmpl, taskType, taskName, err.Error())
}
