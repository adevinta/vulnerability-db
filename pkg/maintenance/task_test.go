/*
Copyright 2021 Adevinta
*/

package maintenance

import (
	"testing"

	"github.com/adevinta/vulnerability-db/pkg/store"
)

func TestNewTask(t *testing.T) {
	type fields struct {
		taskName string
		taskType string
		taskOpts interface{}
		store    store.VulnStore
	}

	testCases := []struct {
		name        string
		fields      fields
		expectedErr error
	}{
		{
			name: "happy path",
			fields: fields{
				taskName: "TestExpireFindings",
				taskType: "expire_findings",
				taskOpts: map[string]interface{}{
					"ttl":    int64(60),
					"source": "vulcan",
				},
			},
			expectedErr: nil,
		},
		{
			name: "invalid options",
			fields: fields{
				taskName: "TaskWithInvalidOpts",
				taskType: "expire_findings",
				taskOpts: map[string]interface{}{
					"wrongOpt": int64(60),
				},
			},
			expectedErr: ErrInvalidOptions,
		},
		{
			name: "invalid task type",
			fields: fields{
				taskName: "TaskWithInvalidType",
				taskType: "wrongTaskType",
				taskOpts: map[string]interface{}{
					"ttl": int64(60),
				},
			},
			expectedErr: ErrInvalidTask,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			_, err := NewTask(tc.fields.taskName, tc.fields.taskType, tc.fields.taskOpts, tc.fields.store)
			if err != tc.expectedErr {
				if tc.expectedErr != nil {
					t.Fatalf("Expected error %v, but got: %v", tc.expectedErr, err)
				} else {
					t.Fatalf("Expected no error, but got: %v", err)
				}
			}
		})
	}
}
