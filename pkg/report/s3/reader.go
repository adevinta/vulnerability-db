/*
Copyright 2023 Adevinta
*/

package s3

import (
	"errors"
	"fmt"
	"io"
	"log"
	"net/url"
	"strings"

	report "github.com/adevinta/vulcan-report"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/aws/aws-sdk-go/service/s3/s3iface"
)

const (
	DefaultAWSRegion = "eu-west-1" // Default AWS region.
)

var (
	ErrUnexpectedScheme = errors.New("report URL unexpected scheme")
	ErrReadingResponse  = errors.New("unable to read response body")
)

type Config struct {
	Region    string
	Endpoint  string
	PathStyle bool
}

// Reader defines an AWS S3 reader.
type Reader struct {
	cfg Config
	svc s3iface.S3API
	l   log.Logger
}

// NewReader creates a new S3 reader.
func NewReader(cfg Config, l log.Logger) (*Reader, error) {
	sess, err := session.NewSession()
	if err != nil {
		err = fmt.Errorf("creating AWS session %w", err)
		return nil, err
	}

	awsCfg := aws.NewConfig()
	if cfg.Region == "" {
		cfg.Region = DefaultAWSRegion
	}
	awsCfg = awsCfg.WithRegion(cfg.Region)
	if cfg.Endpoint != "" {
		awsCfg = awsCfg.WithEndpoint(cfg.Endpoint).WithS3ForcePathStyle(cfg.PathStyle)
	}

	s3Svc := s3.New(sess, awsCfg)

	l.Printf(
		"s3 reader created. Region [%s] Endpoint [%s] PathStyle [%t]",
		cfg.Region, cfg.Endpoint, cfg.PathStyle,
	)
	return &Reader{
		svc: s3Svc,
		cfg: cfg,
		l:   l,
	}, nil
}

// Download downloads the target report from an S3 bucket.
func (r *Reader) Download(reportURL string) (report.Report, error) {
	// Extract bucket and key from the S3 URL
	bucket, key, err := parseS3URL(reportURL)
	if err != nil {
		return report.Report{}, fmt.Errorf("failed to parse S3 URL:%s error:%v", reportURL, err)
	}
	resp, err := r.svc.GetObject(&s3.GetObjectInput{
		Bucket: aws.String(bucket),
		Key:    aws.String(key),
	})
	if err != nil {
		return report.Report{}, fmt.Errorf("failed to download S3 file: %v", err)
	}
	defer resp.Body.Close()

	// Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return report.Report{}, ErrReadingResponse
	}

	var re report.Report
	if err := re.UnmarshalJSONTimeAsString(body); err != nil {
		return report.Report{}, err
	}

	return re, nil
}

// parseS3URL parses the provided S3 style URL and returns
// the S3 bucket and the object key or an error.
func parseS3URL(URL string) (string, string, error) {
	u, err := url.Parse(URL)
	if err != nil {
		return "", "", err
	}
	if u.Scheme != "s3" {
		return "", "", ErrUnexpectedScheme
	}
	return u.Host, strings.TrimLeft(u.Path, "/"), nil
}
