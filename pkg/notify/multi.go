/*
Copyright 2022 Adevinta
*/

package notify

// MultiNotifier represents a Notifier which delegates the
// notification delivery into multiple notifier implementations.
type MultiNotifier struct {
	notifiers []Notifier
}

// NewMultiNotifier creates a new MultiNotifier.
func NewMultiNotifier(notifiers ...Notifier) *MultiNotifier {
	return &MultiNotifier{
		notifiers: notifiers,
	}
}

func (m *MultiNotifier) PushFinding(f FindingNotification) error {
	// For every notifier wrapped by the multi implementation, push
	// the given FindingNotification. Return an error on the first
	// notifier that fails to deliver the notification, so possible
	// repeated sending events might happen. This should be handled
	// by the consumers complying with at-least-once semantics.
	for iN := range m.notifiers {
		if err := m.notifiers[iN].PushFinding(f); err != nil {
			return err
		}
	}
	return nil
}
