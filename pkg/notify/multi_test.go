package notify

import (
	"errors"
	"testing"
)

var (
	mockNotifierErr = errors.New("mock notifier error")
)

type mockNotifier struct {
	err    error
	called bool
}

func (m *mockNotifier) PushFinding(f FindingNotification) error {
	m.called = true
	return m.err
}

func (m *mockNotifier) isCalled() bool {
	return m.called
}

func TestMulti_PushFinding(t *testing.T) {
	testCases := []struct {
		name       string
		notifiers  []*mockNotifier
		f          FindingNotification
		wantErr    error
		wantCalled int
	}{
		{
			name: "Should replay notification to multiple notifiers",
			notifiers: []*mockNotifier{
				{},
				{},
			},
			f:          FindingNotification{},
			wantCalled: 2,
		},
		{
			name: "Should propagate error",
			notifiers: []*mockNotifier{
				{},
				{
					err: mockNotifierErr,
				},
				{},
			},
			f:          FindingNotification{},
			wantErr:    mockNotifierErr,
			wantCalled: 2,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			var nn []Notifier
			for _, n := range tc.notifiers {
				nn = append(nn, Notifier(n))
			}
			multi := NewMultiNotifier(nn...)

			err := multi.PushFinding(tc.f)
			if !errors.Is(err, tc.wantErr) {
				t.Fatalf("unexpected error, got: %v wanted: %v", err, tc.wantErr)
			}

			var nCalled int
			for _, n := range tc.notifiers {
				if n.isCalled() {
					nCalled++
				}
			}
			if nCalled != tc.wantCalled {
				t.Fatalf("expected %d notifiers to be called, but got %d", tc.wantCalled, nCalled)
			}
		})
	}
}
