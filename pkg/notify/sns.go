/*
Copyright 2020 Adevinta
*/

package notify

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/sns"
	"github.com/aws/aws-sdk-go/service/sns/snsiface"
	log "github.com/sirupsen/logrus"
)

// SNSConfig holds the required SNS config information.
type SNSConfig struct {
	TopicArn string `mapstructure:"topic_arn"`
	Enabled  bool   `mapstructure:"enabled"`
}

// SNSNotifier sends push events to an SNS topic.
type SNSNotifier struct {
	conf   SNSConfig
	sns    snsiface.SNSAPI
	logger *log.Logger
}

// NewSNSNotifier creates a new SNSNotifier with the given configuration.
func NewSNSNotifier(conf SNSConfig, logger *log.Logger) (*SNSNotifier, error) {
	sess, err := session.NewSession()
	if err != nil {
		return nil, err
	}

	qd := parseSNSARN(conf.TopicArn)
	srv := sns.New(sess, aws.NewConfig().WithEndpoint(qd.endpoint).WithRegion(qd.region))

	notifier := &SNSNotifier{
		conf:   conf,
		logger: logger,
		sns:    srv,
	}
	return notifier, nil
}

// Push pushes a notification to the configured sns topic.
func (n *SNSNotifier) Push(message interface{}) error {
	if !n.conf.Enabled {
		return nil
	}

	n.logger.Info("Pushing notification to SNS")
	content, err := json.Marshal(&message)
	if err != nil {
		return err
	}
	input := &sns.PublishInput{
		Message:  aws.String(string(content)),
		TopicArn: aws.String(n.conf.TopicArn),
	}
	_, err = n.sns.Publish(input)
	if err != nil {
		return err
	}
	n.logger.Info("Notification pushed to SNS successfully")

	return nil
}

type snsData struct {
	endpoint string
	region   string
	name     string
}

func parseSNSARN(snsARN string) snsData {
	arn := strings.Split(snsARN, ":")
	region := arn[3]
	accountID := arn[4]
	name := arn[5]
	return snsData{
		name:     name,
		region:   region,
		endpoint: fmt.Sprintf("https://sns.%v.amazonaws.com/%v/%v", region, accountID, name),
	}
}
