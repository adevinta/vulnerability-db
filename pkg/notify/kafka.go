/*
Copyright 2022 Adevinta
*/

package notify

import (
	"encoding/json"

	log "github.com/sirupsen/logrus"
)

const (
	Version = "v0.0.1" // Defines the notification schema version
)

// EventStreamClient represent a client of an event stream system, like Kafka
// or AWS FIFO SQS queues.
type EventStreamClient interface {
	Push(id string, payload []byte, metadata map[string][]byte) error
}

// KafkaNotifier represents a Notifier implementation to send notifications to
// a Kafka topic.
type KafkaNotifier struct {
	c EventStreamClient
	l *log.Logger
}

// NewKafkaNotifier creates a new KafkaNotifier.
func NewKafkaNotifier(c EventStreamClient, l *log.Logger) *KafkaNotifier {
	return &KafkaNotifier{
		c,
		l,
	}
}

// PushFinding sends the given FindingNotification to the configured Kafka topic
// in the wrapped EventStreamClient.
func (k *KafkaNotifier) PushFinding(f FindingNotification) error {
	k.l.WithFields(log.Fields{
		"notifier": "kafka",
		"id":       f.ID,
	}).Debug("pushing finding notification")

	payload, err := json.Marshal(f)
	if err != nil {
		return err
	}
	meta := map[string][]byte{
		"version": []byte(Version),
	}
	return k.c.Push(f.ID, payload, meta)
}
