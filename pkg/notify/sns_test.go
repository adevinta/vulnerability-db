/*
Copyright 2021 Adevinta
*/

package notify

import (
	"testing"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"

	"github.com/aws/aws-sdk-go/service/sns"
	"github.com/aws/aws-sdk-go/service/sns/snsiface"
	log "github.com/sirupsen/logrus"
)

type snsMock struct {
	snsiface.SNSAPI
	notification *sns.PublishInput
}

func (m *snsMock) Publish(s *sns.PublishInput) (*sns.PublishOutput, error) {
	m.notification = s
	return nil, nil
}

func TestSNSNotifier_Push(t *testing.T) {
	type fields struct {
		conf   SNSConfig
		sns    *snsMock
		logger *log.Logger
	}

	tests := []struct {
		name    string
		fields  fields
		message map[string]interface{}
		want    *sns.PublishInput
		wantErr bool
	}{
		{
			name: "PushesMsgsToTopic",
			fields: fields{
				sns:    &snsMock{},
				logger: log.New(),
				conf: SNSConfig{
					TopicArn: "arn:aTopic",
					Enabled:  true,
				},
			},
			message: map[string]interface{}{"a": "b"},
			want: &sns.PublishInput{
				Message:  aws.String(`{"a":"b"}`),
				TopicArn: aws.String("arn:aTopic"),
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := &SNSNotifier{
				conf:   tt.fields.conf,
				sns:    tt.fields.sns,
				logger: tt.fields.logger,
			}
			if err := s.Push(tt.message); (err != nil) != tt.wantErr {
				t.Errorf("SNSNotifier.Push() error = %v, wantErr %v", err, tt.wantErr)
			}
			diff := cmp.Diff(tt.want, tt.fields.sns.notification, cmpopts.IgnoreUnexported(sns.PublishInput{}))
			if diff != "" {
				t.Errorf("want!= got. Diffs:%s", diff)
			}
		})
	}
}
